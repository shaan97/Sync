.TH "nlohmann::basic_json< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >" 3 "Tue Jul 18 2017" "Version 1.0.0" "Sync" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nlohmann::basic_json< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > \- a class to store JSON values  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <json\&.hpp>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBinternal_iterator\fP"
.br
.RI "an iterator value "
.ti -1c
.RI "class \fBiter_impl\fP"
.br
.RI "a template for a random access iterator for the \fBbasic_json\fP class "
.ti -1c
.RI "class \fBiteration_proxy\fP"
.br
.RI "proxy class for the iterator_wrapper functions "
.ti -1c
.RI "class \fBjson_pointer\fP"
.br
.RI "JSON Pointer\&. "
.ti -1c
.RI "class \fBjson_reverse_iterator\fP"
.br
.RI "a template for a reverse iterator class "
.ti -1c
.RI "union \fBjson_value\fP"
.br
.RI "a JSON value "
.ti -1c
.RI "class \fBlexer\fP"
.br
.RI "lexical analysis "
.ti -1c
.RI "struct \fBnumtostr\fP"
.br
.RI "locale-independent serialization for built-in arithmetic types "
.ti -1c
.RI "class \fBparser\fP"
.br
.RI "syntax analysis "
.ti -1c
.RI "class \fBprimitive_iterator_t\fP"
.br
.RI "an iterator for primitive JSON types "
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBparse_event_t\fP : uint8_t { \fBparse_event_t::object_start\fP, \fBparse_event_t::object_end\fP, \fBparse_event_t::array_start\fP, \fBparse_event_t::array_end\fP, \fBparse_event_t::key\fP, \fBparse_event_t::value\fP }
.RI "JSON callback events\&. ""
.br
.ti -1c
.RI "using \fBvalue_t\fP = \fBdetail::value_t\fP"
.br
.ti -1c
.RI "template<typename T , typename SFINAE > using \fBjson_serializer\fP = JSONSerializer< T, SFINAE >"
.br
.ti -1c
.RI "using \fBparser_callback_t\fP = std::function< bool(int depth, \fBparse_event_t\fP event, \fBbasic_json\fP &parsed)>"
.br
.RI "per-element parser callback type "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::string \fBtype_name\fP () const"
.br
.RI "return the type as string "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBallocator_type\fP \fBget_allocator\fP ()"
.br
.RI "returns the allocator associated with the container "
.ti -1c
.RI "static \fBbasic_json\fP \fBmeta\fP ()"
.br
.RI "returns version information on the library "
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "using \fBbasic_json_t\fP = \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >"
.br
.RI "workaround type for MSVC "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBassert_invariant\fP () const"
.br
.RI "checks the class invariants "
.ti -1c
.RI "\fBboolean_t\fP \fBget_impl\fP (\fBboolean_t\fP *) const"
.br
.RI "get a boolean (explicit) "
.ti -1c
.RI "\fBobject_t\fP * \fBget_impl_ptr\fP (\fBobject_t\fP *) noexcept"
.br
.RI "get a pointer to the value (object) "
.ti -1c
.RI "constexpr const \fBobject_t\fP * \fBget_impl_ptr\fP (const \fBobject_t\fP *) const noexcept"
.br
.RI "get a pointer to the value (object) "
.ti -1c
.RI "\fBarray_t\fP * \fBget_impl_ptr\fP (\fBarray_t\fP *) noexcept"
.br
.RI "get a pointer to the value (array) "
.ti -1c
.RI "constexpr const \fBarray_t\fP * \fBget_impl_ptr\fP (const \fBarray_t\fP *) const noexcept"
.br
.RI "get a pointer to the value (array) "
.ti -1c
.RI "\fBstring_t\fP * \fBget_impl_ptr\fP (\fBstring_t\fP *) noexcept"
.br
.RI "get a pointer to the value (string) "
.ti -1c
.RI "constexpr const \fBstring_t\fP * \fBget_impl_ptr\fP (const \fBstring_t\fP *) const noexcept"
.br
.RI "get a pointer to the value (string) "
.ti -1c
.RI "\fBboolean_t\fP * \fBget_impl_ptr\fP (\fBboolean_t\fP *) noexcept"
.br
.RI "get a pointer to the value (boolean) "
.ti -1c
.RI "constexpr const \fBboolean_t\fP * \fBget_impl_ptr\fP (const \fBboolean_t\fP *) const noexcept"
.br
.RI "get a pointer to the value (boolean) "
.ti -1c
.RI "\fBnumber_integer_t\fP * \fBget_impl_ptr\fP (\fBnumber_integer_t\fP *) noexcept"
.br
.RI "get a pointer to the value (integer number) "
.ti -1c
.RI "constexpr const \fBnumber_integer_t\fP * \fBget_impl_ptr\fP (const \fBnumber_integer_t\fP *) const noexcept"
.br
.RI "get a pointer to the value (integer number) "
.ti -1c
.RI "\fBnumber_unsigned_t\fP * \fBget_impl_ptr\fP (\fBnumber_unsigned_t\fP *) noexcept"
.br
.RI "get a pointer to the value (unsigned number) "
.ti -1c
.RI "constexpr const \fBnumber_unsigned_t\fP * \fBget_impl_ptr\fP (const \fBnumber_unsigned_t\fP *) const noexcept"
.br
.RI "get a pointer to the value (unsigned number) "
.ti -1c
.RI "\fBnumber_float_t\fP * \fBget_impl_ptr\fP (\fBnumber_float_t\fP *) noexcept"
.br
.RI "get a pointer to the value (floating-point number) "
.ti -1c
.RI "constexpr const \fBnumber_float_t\fP * \fBget_impl_ptr\fP (const \fBnumber_float_t\fP *) const noexcept"
.br
.RI "get a pointer to the value (floating-point number) "
.ti -1c
.RI "void \fBdump\fP (std::ostream &o, const bool pretty_print, const unsigned int indent_step, const unsigned int current_indent=0) const"
.br
.RI "internal implementation of the serialization function "
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "template<typename T , typename\&.\&.\&. Args> static T * \fBcreate\fP (Args &&\&.\&.\&. args)"
.br
.RI "helper for exception-safe object creation "
.ti -1c
.RI "template<typename ReferenceType , typename ThisType > static ReferenceType \fBget_ref_impl\fP (ThisType &obj)"
.br
.RI "helper function to implement \fBget_ref()\fP "
.ti -1c
.RI "static std::size_t \fBextra_space\fP (const \fBstring_t\fP &s) noexcept"
.br
.RI "calculates the extra space to escape a JSON string "
.ti -1c
.RI "static \fBstring_t\fP \fBescape_string\fP (const \fBstring_t\fP &s)"
.br
.RI "escape a string "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBvalue_t\fP \fBm_type\fP = value_t::null"
.br
.RI "the type of the current element "
.ti -1c
.RI "\fBjson_value\fP \fBm_value\fP = {}"
.br
.RI "the value of the current element "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<detail::value_t > struct \fBdetail::external_constructor\fP"
.br
.in -1c
.SS "container types"
The canonic container types to use \fBbasic_json\fP like any other STL container\&. 
.in +1c
.ti -1c
.RI "using \fBvalue_type\fP = \fBbasic_json\fP"
.br
.RI "the type of elements in a \fBbasic_json\fP container "
.ti -1c
.RI "using \fBreference\fP = \fBvalue_type\fP &"
.br
.RI "the type of an element reference "
.ti -1c
.RI "using \fBconst_reference\fP = const \fBvalue_type\fP &"
.br
.RI "the type of an element const reference "
.ti -1c
.RI "using \fBdifference_type\fP = std::ptrdiff_t"
.br
.RI "a type to represent differences between iterators "
.ti -1c
.RI "using \fBsize_type\fP = std::size_t"
.br
.RI "a type to represent container sizes "
.ti -1c
.RI "using \fBallocator_type\fP = AllocatorType< \fBbasic_json\fP >"
.br
.RI "the allocator type "
.ti -1c
.RI "using \fBpointer\fP = typename std::allocator_traits< \fBallocator_type\fP >::\fBpointer\fP"
.br
.RI "the type of an element pointer "
.ti -1c
.RI "using \fBconst_pointer\fP = typename std::allocator_traits< \fBallocator_type\fP >::\fBconst_pointer\fP"
.br
.RI "the type of an element const pointer "
.ti -1c
.RI "using \fBiterator\fP = \fBiter_impl\fP< \fBbasic_json\fP >"
.br
.RI "an iterator for a \fBbasic_json\fP container "
.ti -1c
.RI "using \fBconst_iterator\fP = \fBiter_impl\fP< const \fBbasic_json\fP >"
.br
.RI "a const iterator for a \fBbasic_json\fP container "
.ti -1c
.RI "using \fBreverse_iterator\fP = \fBjson_reverse_iterator\fP< typename \fBbasic_json::iterator\fP >"
.br
.RI "a reverse iterator for a \fBbasic_json\fP container "
.ti -1c
.RI "using \fBconst_reverse_iterator\fP = \fBjson_reverse_iterator\fP< typename \fBbasic_json::const_iterator\fP >"
.br
.RI "a const reverse iterator for a \fBbasic_json\fP container "
.in -1c
.SS "JSON value data types"
The data types to store a JSON value\&. These types are derived from the template arguments passed to class \fBbasic_json\fP\&. 
.in +1c
.ti -1c
.RI "using \fBobject_t\fP = ObjectType< StringType, \fBbasic_json\fP, std::less< StringType >, AllocatorType< std::pair< const StringType, \fBbasic_json\fP > >>"
.br
.RI "a type for an object "
.ti -1c
.RI "using \fBarray_t\fP = ArrayType< \fBbasic_json\fP, AllocatorType< \fBbasic_json\fP > >"
.br
.RI "a type for an array "
.ti -1c
.RI "using \fBstring_t\fP = StringType"
.br
.RI "a type for a string "
.ti -1c
.RI "using \fBboolean_t\fP = BooleanType"
.br
.RI "a type for a boolean "
.ti -1c
.RI "using \fBnumber_integer_t\fP = NumberIntegerType"
.br
.RI "a type for a number (integer) "
.ti -1c
.RI "using \fBnumber_unsigned_t\fP = NumberUnsignedType"
.br
.RI "a type for a number (unsigned) "
.ti -1c
.RI "using \fBnumber_float_t\fP = NumberFloatType"
.br
.RI "a type for a number (floating-point) "
.in -1c
.SS "constructors and destructors"
Constructors of class \fBbasic_json\fP, copy/move constructor, copy assignment, static functions creating objects, and the destructor\&. 
.in +1c
.ti -1c
.RI "static \fBbasic_json\fP \fBarray\fP (std::initializer_list< \fBbasic_json\fP > init=std::initializer_list< \fBbasic_json\fP >())"
.br
.RI "explicitly create an array from an initializer list "
.ti -1c
.RI "static \fBbasic_json\fP \fBobject\fP (std::initializer_list< \fBbasic_json\fP > init=std::initializer_list< \fBbasic_json\fP >())"
.br
.RI "explicitly create an object from an initializer list "
.ti -1c
.RI "\fBbasic_json\fP (const \fBvalue_t\fP \fBvalue_type\fP)"
.br
.RI "create an empty value with a given type "
.ti -1c
.RI "\fBbasic_json\fP (std::nullptr_t=nullptr) noexcept"
.br
.RI "create a null object "
.ti -1c
.RI "template<typename CompatibleType , typename U  = detail::uncvref_t<CompatibleType>, detail::enable_if_t< not std::is_base_of< std::istream, U >::value and not std::is_same< U, basic_json_t >::value and not detail::is_basic_json_nested_type< basic_json_t, U >::value and detail::has_to_json< basic_json, U >::value, int >  = 0> \fBbasic_json\fP (CompatibleType &&val) noexcept(noexcept(JSONSerializer< U >::\fBto_json\fP(std::declval< \fBbasic_json_t\fP &>(), std::forward< CompatibleType >(val))))"
.br
.RI "create a JSON value "
.ti -1c
.RI "\fBbasic_json\fP (std::initializer_list< \fBbasic_json\fP > init, bool type_deduction=true, \fBvalue_t\fP manual_type=\fBvalue_t::array\fP)"
.br
.RI "create a container (array or object) from an initializer list "
.ti -1c
.RI "\fBbasic_json\fP (\fBsize_type\fP cnt, const \fBbasic_json\fP &val)"
.br
.RI "construct an array with count copies of given value "
.ti -1c
.RI "template<class InputIT , typename std::enable_if< std::is_same< InputIT, typename basic_json_t::iterator >::value or std::is_same< InputIT, typename basic_json_t::const_iterator >::value, int >::type  = 0> \fBbasic_json\fP (InputIT first, InputIT last)"
.br
.RI "construct a JSON container given an iterator range "
.ti -1c
.RI "\fBJSON_DEPRECATED\fP \fBbasic_json\fP (std::istream &i, const \fBparser_callback_t\fP cb=nullptr)"
.br
.RI "construct a JSON value given an input stream "
.ti -1c
.RI "\fBbasic_json\fP (const \fBbasic_json\fP &other)"
.br
.RI "copy constructor "
.ti -1c
.RI "\fBbasic_json\fP (\fBbasic_json\fP &&other) noexcept"
.br
.RI "move constructor "
.ti -1c
.RI "\fBreference\fP & \fBoperator=\fP (\fBbasic_json\fP other) noexcept(std::is_nothrow_move_constructible< \fBvalue_t\fP >::\fBvalue\fP and std::is_nothrow_move_assignable< \fBvalue_t\fP >::\fBvalue\fP and std::is_nothrow_move_constructible< \fBjson_value\fP >::\fBvalue\fP and std::is_nothrow_move_assignable< \fBjson_value\fP >::\fBvalue\fP)"
.br
.RI "copy assignment "
.ti -1c
.RI "\fB~basic_json\fP ()"
.br
.RI "destructor "
.in -1c
.SS "object inspection"
Functions to inspect the type of a JSON value\&. 
.in +1c
.ti -1c
.RI "\fBstring_t\fP \fBdump\fP (const int indent=\-1) const"
.br
.RI "serialization "
.ti -1c
.RI "constexpr \fBvalue_t\fP \fBtype\fP () const noexcept"
.br
.RI "return the type of the JSON value (explicit) "
.ti -1c
.RI "constexpr bool \fBis_primitive\fP () const noexcept"
.br
.RI "return whether type is primitive "
.ti -1c
.RI "constexpr bool \fBis_structured\fP () const noexcept"
.br
.RI "return whether type is structured "
.ti -1c
.RI "constexpr bool \fBis_null\fP () const noexcept"
.br
.RI "return whether value is null "
.ti -1c
.RI "constexpr bool \fBis_boolean\fP () const noexcept"
.br
.RI "return whether value is a boolean "
.ti -1c
.RI "constexpr bool \fBis_number\fP () const noexcept"
.br
.RI "return whether value is a number "
.ti -1c
.RI "constexpr bool \fBis_number_integer\fP () const noexcept"
.br
.RI "return whether value is an integer number "
.ti -1c
.RI "constexpr bool \fBis_number_unsigned\fP () const noexcept"
.br
.RI "return whether value is an unsigned integer number "
.ti -1c
.RI "constexpr bool \fBis_number_float\fP () const noexcept"
.br
.RI "return whether value is a floating-point number "
.ti -1c
.RI "constexpr bool \fBis_object\fP () const noexcept"
.br
.RI "return whether value is an object "
.ti -1c
.RI "constexpr bool \fBis_array\fP () const noexcept"
.br
.RI "return whether value is an array "
.ti -1c
.RI "constexpr bool \fBis_string\fP () const noexcept"
.br
.RI "return whether value is a string "
.ti -1c
.RI "constexpr bool \fBis_discarded\fP () const noexcept"
.br
.RI "return whether value is discarded "
.ti -1c
.RI "constexpr \fBoperator value_t\fP () const noexcept"
.br
.RI "return the type of the JSON value (implicit) "
.in -1c
.SS "value access"
Direct access to the stored value of a JSON value\&. 
.in +1c
.ti -1c
.RI "template<typename BasicJsonType , detail::enable_if_t< std::is_same< typename std::remove_const< BasicJsonType >::type, basic_json_t >::value, int >  = 0> \fBbasic_json\fP \fBget\fP () const"
.br
.RI "get special-case overload "
.ti -1c
.RI "template<typename ValueTypeCV , typename ValueType  = detail::uncvref_t<ValueTypeCV>, detail::enable_if_t< not std::is_same< basic_json_t, ValueType >::value and detail::has_from_json< basic_json_t, ValueType >::value and not detail::has_non_default_from_json< basic_json_t, ValueType >::value, int >  = 0> ValueType \fBget\fP () const noexcept(noexcept(JSONSerializer< ValueType >::\fBfrom_json\fP(std::declval< const \fBbasic_json_t\fP &>(), std::declval< ValueType &>())))"
.br
.RI "get a value (explicit) "
.ti -1c
.RI "template<typename ValueTypeCV , typename ValueType  = detail::uncvref_t<ValueTypeCV>, detail::enable_if_t< not std::is_same< basic_json_t, ValueType >::value and detail::has_non_default_from_json< basic_json_t, ValueType >::value, int >  = 0> ValueType \fBget\fP () const noexcept(noexcept(JSONSerializer< ValueTypeCV >::\fBfrom_json\fP(std::declval< const \fBbasic_json_t\fP &>())))"
.br
.RI "get a value (explicit); special case "
.ti -1c
.RI "template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value, int >::type  = 0> PointerType \fBget\fP () noexcept"
.br
.RI "get a pointer value (explicit) "
.ti -1c
.RI "template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value, int >::type  = 0> constexpr const PointerType \fBget\fP () const noexcept"
.br
.RI "get a pointer value (explicit) "
.ti -1c
.RI "template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value, int >::type  = 0> PointerType \fBget_ptr\fP () noexcept"
.br
.RI "get a pointer value (implicit) "
.ti -1c
.RI "template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value and std::is_const< typename std::remove_pointer< PointerType >::type >::value, int >::type  = 0> constexpr const PointerType \fBget_ptr\fP () const noexcept"
.br
.RI "get a pointer value (implicit) "
.ti -1c
.RI "template<typename ReferenceType , typename std::enable_if< std::is_reference< ReferenceType >::value, int >::type  = 0> ReferenceType \fBget_ref\fP ()"
.br
.RI "get a reference value (implicit) "
.ti -1c
.RI "template<typename ReferenceType , typename std::enable_if< std::is_reference< ReferenceType >::value and std::is_const< typename std::remove_reference< ReferenceType >::type >::value, int >::type  = 0> ReferenceType \fBget_ref\fP () const"
.br
.RI "get a reference value (implicit) "
.ti -1c
.RI "template<typename ValueType , typename std::enable_if< not std::is_pointer< ValueType >::value and not std::is_same< ValueType, typename string_t::value_type >::value and not std::is_same< ValueType, std::initializer_list< typename string_t::value_type >>::value, int >::type  = 0> \fBoperator ValueType\fP () const"
.br
.RI "get a value (implicit) "
.in -1c
.SS "element access"
Access to the JSON value\&. 
.in +1c
.ti -1c
.RI "\fBreference\fP \fBat\fP (\fBsize_type\fP idx)"
.br
.RI "access specified array element with bounds checking "
.ti -1c
.RI "\fBconst_reference\fP \fBat\fP (\fBsize_type\fP idx) const"
.br
.RI "access specified array element with bounds checking "
.ti -1c
.RI "\fBreference\fP \fBat\fP (const typename object_t::key_type &key)"
.br
.RI "access specified object element with bounds checking "
.ti -1c
.RI "\fBconst_reference\fP \fBat\fP (const typename object_t::key_type &key) const"
.br
.RI "access specified object element with bounds checking "
.ti -1c
.RI "\fBreference\fP \fBoperator[]\fP (\fBsize_type\fP idx)"
.br
.RI "access specified array element "
.ti -1c
.RI "\fBconst_reference\fP \fBoperator[]\fP (\fBsize_type\fP idx) const"
.br
.RI "access specified array element "
.ti -1c
.RI "\fBreference\fP \fBoperator[]\fP (const typename object_t::key_type &key)"
.br
.RI "access specified object element "
.ti -1c
.RI "\fBconst_reference\fP \fBoperator[]\fP (const typename object_t::key_type &key) const"
.br
.RI "read-only access specified object element "
.ti -1c
.RI "template<typename T , std::size_t n> \fBreference\fP \fBoperator[]\fP (T *(&key)[n])"
.br
.RI "access specified object element "
.ti -1c
.RI "template<typename T , std::size_t n> \fBconst_reference\fP \fBoperator[]\fP (T *(&key)[n]) const"
.br
.RI "read-only access specified object element "
.ti -1c
.RI "template<typename T > \fBreference\fP \fBoperator[]\fP (T *key)"
.br
.RI "access specified object element "
.ti -1c
.RI "template<typename T > \fBconst_reference\fP \fBoperator[]\fP (T *key) const"
.br
.RI "read-only access specified object element "
.ti -1c
.RI "template<class ValueType , typename std::enable_if< std::is_convertible< basic_json_t, ValueType >::value, int >::type  = 0> ValueType \fBvalue\fP (const typename object_t::key_type &key, ValueType default_value) const"
.br
.RI "access specified object element with default value "
.ti -1c
.RI "\fBstring_t\fP \fBvalue\fP (const typename object_t::key_type &key, const char *default_value) const"
.br
.RI "overload for a default value of type const char* "
.ti -1c
.RI "template<class ValueType , typename std::enable_if< std::is_convertible< basic_json_t, ValueType >::value, int >::type  = 0> ValueType \fBvalue\fP (const \fBjson_pointer\fP &ptr, ValueType default_value) const"
.br
.RI "access specified object element via JSON Pointer with default value "
.ti -1c
.RI "\fBstring_t\fP \fBvalue\fP (const \fBjson_pointer\fP &ptr, const char *default_value) const"
.br
.RI "overload for a default value of type const char* "
.ti -1c
.RI "\fBreference\fP \fBfront\fP ()"
.br
.RI "access the first element "
.ti -1c
.RI "\fBconst_reference\fP \fBfront\fP () const"
.br
.RI "access the first element "
.ti -1c
.RI "\fBreference\fP \fBback\fP ()"
.br
.RI "access the last element "
.ti -1c
.RI "\fBconst_reference\fP \fBback\fP () const"
.br
.RI "access the last element "
.ti -1c
.RI "template<class IteratorType , typename std::enable_if< std::is_same< IteratorType, typename basic_json_t::iterator >::value or std::is_same< IteratorType, typename basic_json_t::const_iterator >::value, int >::type  = 0> IteratorType \fBerase\fP (IteratorType pos)"
.br
.RI "remove element given an iterator "
.ti -1c
.RI "template<class IteratorType , typename std::enable_if< std::is_same< IteratorType, typename basic_json_t::iterator >::value or std::is_same< IteratorType, typename basic_json_t::const_iterator >::value, int >::type  = 0> IteratorType \fBerase\fP (IteratorType first, IteratorType last)"
.br
.RI "remove elements given an iterator range "
.ti -1c
.RI "\fBsize_type\fP \fBerase\fP (const typename object_t::key_type &key)"
.br
.RI "remove element from a JSON object given a key "
.ti -1c
.RI "void \fBerase\fP (const \fBsize_type\fP idx)"
.br
.RI "remove element from a JSON array given an index "
.in -1c
.SS "lookup"

.in +1c
.ti -1c
.RI "\fBiterator\fP \fBfind\fP (typename object_t::key_type key)"
.br
.RI "find an element in a JSON object "
.ti -1c
.RI "\fBconst_iterator\fP \fBfind\fP (typename object_t::key_type key) const"
.br
.RI "find an element in a JSON object "
.ti -1c
.RI "\fBsize_type\fP \fBcount\fP (typename object_t::key_type key) const"
.br
.RI "returns the number of occurrences of a key in a JSON object "
.in -1c
.SS "iterators"

.in +1c
.ti -1c
.RI "static \fBiteration_proxy\fP< \fBiterator\fP > \fBiterator_wrapper\fP (\fBreference\fP cont)"
.br
.RI "wrapper to access iterator member functions in range-based for "
.ti -1c
.RI "static \fBiteration_proxy\fP< \fBconst_iterator\fP > \fBiterator_wrapper\fP (\fBconst_reference\fP cont)"
.br
.RI "wrapper to access iterator member functions in range-based for "
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP () noexcept"
.br
.RI "returns an iterator to the first element "
.ti -1c
.RI "\fBconst_iterator\fP \fBbegin\fP () const noexcept"
.br
.RI "returns a const iterator to the first element "
.ti -1c
.RI "\fBconst_iterator\fP \fBcbegin\fP () const noexcept"
.br
.RI "returns a const iterator to the first element "
.ti -1c
.RI "\fBiterator\fP \fBend\fP () noexcept"
.br
.RI "returns an iterator to one past the last element "
.ti -1c
.RI "\fBconst_iterator\fP \fBend\fP () const noexcept"
.br
.RI "returns a const iterator to one past the last element "
.ti -1c
.RI "\fBconst_iterator\fP \fBcend\fP () const noexcept"
.br
.RI "returns a const iterator to one past the last element "
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP () noexcept"
.br
.RI "returns an iterator to the reverse-beginning "
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrbegin\fP () const noexcept"
.br
.RI "returns a const reverse iterator to the last element "
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP () noexcept"
.br
.RI "returns an iterator to the reverse-end "
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrend\fP () const noexcept"
.br
.RI "returns a const reverse iterator to one before the first "
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrbegin\fP () const noexcept"
.br
.RI "returns a const reverse iterator to the last element "
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrend\fP () const noexcept"
.br
.RI "returns a const reverse iterator to one before the first "
.in -1c
.SS "capacity"

.in +1c
.ti -1c
.RI "bool \fBempty\fP () const noexcept"
.br
.RI "checks whether the container is empty "
.ti -1c
.RI "\fBsize_type\fP \fBsize\fP () const noexcept"
.br
.RI "returns the number of elements "
.ti -1c
.RI "\fBsize_type\fP \fBmax_size\fP () const noexcept"
.br
.RI "returns the maximum possible number of elements "
.in -1c
.SS "modifiers"

.in +1c
.ti -1c
.RI "void \fBclear\fP () noexcept"
.br
.RI "clears the contents "
.ti -1c
.RI "void \fBpush_back\fP (\fBbasic_json\fP &&val)"
.br
.RI "add an object to an array "
.ti -1c
.RI "\fBreference\fP \fBoperator+=\fP (\fBbasic_json\fP &&val)"
.br
.RI "add an object to an array "
.ti -1c
.RI "void \fBpush_back\fP (const \fBbasic_json\fP &val)"
.br
.RI "add an object to an array "
.ti -1c
.RI "\fBreference\fP \fBoperator+=\fP (const \fBbasic_json\fP &val)"
.br
.RI "add an object to an array "
.ti -1c
.RI "void \fBpush_back\fP (const typename object_t::value_type &val)"
.br
.RI "add an object to an object "
.ti -1c
.RI "\fBreference\fP \fBoperator+=\fP (const typename object_t::value_type &val)"
.br
.RI "add an object to an object "
.ti -1c
.RI "void \fBpush_back\fP (std::initializer_list< \fBbasic_json\fP > init)"
.br
.RI "add an object to an object "
.ti -1c
.RI "\fBreference\fP \fBoperator+=\fP (std::initializer_list< \fBbasic_json\fP > init)"
.br
.RI "add an object to an object "
.ti -1c
.RI "template<class\&.\&.\&. Args> void \fBemplace_back\fP (Args &&\&.\&.\&. args)"
.br
.RI "add an object to an array "
.ti -1c
.RI "template<class\&.\&.\&. Args> std::pair< \fBiterator\fP, bool > \fBemplace\fP (Args &&\&.\&.\&. args)"
.br
.RI "add an object to an object if key does not exist "
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP pos, const \fBbasic_json\fP &val)"
.br
.RI "inserts element "
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP pos, \fBbasic_json\fP &&val)"
.br
.RI "inserts element "
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP pos, \fBsize_type\fP cnt, const \fBbasic_json\fP &val)"
.br
.RI "inserts elements "
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP pos, \fBconst_iterator\fP first, \fBconst_iterator\fP last)"
.br
.RI "inserts elements "
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP pos, std::initializer_list< \fBbasic_json\fP > ilist)"
.br
.RI "inserts elements "
.ti -1c
.RI "void \fBswap\fP (\fBreference\fP other) noexcept(std::is_nothrow_move_constructible< \fBvalue_t\fP >::\fBvalue\fP and std::is_nothrow_move_assignable< \fBvalue_t\fP >::\fBvalue\fP and std::is_nothrow_move_constructible< \fBjson_value\fP >::\fBvalue\fP and std::is_nothrow_move_assignable< \fBjson_value\fP >::\fBvalue\fP)"
.br
.RI "exchanges the values "
.ti -1c
.RI "void \fBswap\fP (\fBarray_t\fP &other)"
.br
.RI "exchanges the values "
.ti -1c
.RI "void \fBswap\fP (\fBobject_t\fP &other)"
.br
.RI "exchanges the values "
.ti -1c
.RI "void \fBswap\fP (\fBstring_t\fP &other)"
.br
.RI "exchanges the values "
.in -1c
.SS "lexicographical comparison operators"

.in +1c
.ti -1c
.RI "bool \fBoperator==\fP (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: equal "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator==\fP (\fBconst_reference\fP lhs, const ScalarType rhs) noexcept"
.br
.RI "comparison: equal "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator==\fP (const ScalarType lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: equal "
.ti -1c
.RI "bool \fBoperator!=\fP (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: not equal "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator!=\fP (\fBconst_reference\fP lhs, const ScalarType rhs) noexcept"
.br
.RI "comparison: not equal "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator!=\fP (const ScalarType lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: not equal "
.ti -1c
.RI "bool \fBoperator<\fP (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: less than "
.ti -1c
.RI "bool \fBoperator<=\fP (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: less than or equal "
.ti -1c
.RI "bool \fBoperator>\fP (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: greater than "
.ti -1c
.RI "bool \fBoperator>=\fP (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: greater than or equal "
.in -1c
.SS "serialization"

.in +1c
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &o, const \fBbasic_json\fP &j)"
.br
.RI "serialize to stream "
.ti -1c
.RI "std::ostream & \fBoperator>>\fP (const \fBbasic_json\fP &j, std::ostream &o)"
.br
.RI "serialize to stream "
.in -1c
.SS "deserialization"

.in +1c
.ti -1c
.RI "std::istream & \fBoperator<<\fP (\fBbasic_json\fP &j, std::istream &i)"
.br
.RI "deserialize from stream "
.ti -1c
.RI "std::istream & \fBoperator>>\fP (std::istream &i, \fBbasic_json\fP &j)"
.br
.RI "deserialize from stream "
.ti -1c
.RI "template<class T , std::size_t N> static \fBbasic_json\fP \fBparse\fP (T(&\fBarray\fP)[N], const \fBparser_callback_t\fP cb=nullptr)"
.br
.RI "deserialize from an array "
.ti -1c
.RI "template<typename CharT , typename std::enable_if< std::is_pointer< CharT >::value and std::is_integral< typename std::remove_pointer< CharT >::type >::value and sizeof(typename std::remove_pointer< CharT >::type)==1, int >::type  = 0> static \fBbasic_json\fP \fBparse\fP (const CharT s, const \fBparser_callback_t\fP cb=nullptr)"
.br
.RI "deserialize from string literal "
.ti -1c
.RI "static \fBbasic_json\fP \fBparse\fP (std::istream &i, const \fBparser_callback_t\fP cb=nullptr)"
.br
.RI "deserialize from stream "
.ti -1c
.RI "static \fBbasic_json\fP \fBparse\fP (std::istream &&i, const \fBparser_callback_t\fP cb=nullptr)"
.br
.RI "deserialize from stream "
.ti -1c
.RI "template<class IteratorType , typename std::enable_if< std::is_base_of< std::random_access_iterator_tag, typename std::iterator_traits< IteratorType >::iterator_category >::value, int >::type  = 0> static \fBbasic_json\fP \fBparse\fP (IteratorType first, IteratorType last, const \fBparser_callback_t\fP cb=nullptr)"
.br
.RI "deserialize from an iterator range with contiguous storage "
.ti -1c
.RI "template<class ContiguousContainer , typename std::enable_if< not std::is_pointer< ContiguousContainer >::value and std::is_base_of< std::random_access_iterator_tag, typename std::iterator_traits< decltype(std::begin(std::declval< ContiguousContainer const >()))>::iterator_category >::value, int >::type  = 0> static \fBbasic_json\fP \fBparse\fP (const ContiguousContainer &c, const \fBparser_callback_t\fP cb=nullptr)"
.br
.RI "deserialize from a container with contiguous storage "
.in -1c
.SS "binary serialization/deserialization support"

.in +1c
.ti -1c
.RI "static std::vector< uint8_t > \fBto_msgpack\fP (const \fBbasic_json\fP &j)"
.br
.RI "create a MessagePack serialization of a given JSON value "
.ti -1c
.RI "static \fBbasic_json\fP \fBfrom_msgpack\fP (const std::vector< uint8_t > &v, const size_t start_index=0)"
.br
.RI "create a JSON value from a byte vector in MessagePack format "
.ti -1c
.RI "static std::vector< uint8_t > \fBto_cbor\fP (const \fBbasic_json\fP &j)"
.br
.RI "create a MessagePack serialization of a given JSON value "
.ti -1c
.RI "static \fBbasic_json\fP \fBfrom_cbor\fP (const std::vector< uint8_t > &v, const size_t start_index=0)"
.br
.RI "create a JSON value from a byte vector in CBOR format "
.ti -1c
.RI "template<typename T > static void \fBadd_to_vector\fP (std::vector< uint8_t > &vec, size_t bytes, const T number)"
.br
.ti -1c
.RI "template<typename T > static T \fBget_from_vector\fP (const std::vector< uint8_t > &vec, const size_t current_index)"
.br
.RI "take sufficient bytes from a vector to fill an integer variable "
.ti -1c
.RI "static void \fBto_msgpack_internal\fP (const \fBbasic_json\fP &j, std::vector< uint8_t > &v)"
.br
.RI "create a MessagePack serialization of a given JSON value "
.ti -1c
.RI "static void \fBto_cbor_internal\fP (const \fBbasic_json\fP &j, std::vector< uint8_t > &v)"
.br
.RI "create a CBOR serialization of a given JSON value "
.ti -1c
.RI "static void \fBcheck_length\fP (const size_t \fBsize\fP, const size_t len, const size_t offset)"
.br
.ti -1c
.RI "static \fBbasic_json\fP \fBfrom_msgpack_internal\fP (const std::vector< uint8_t > &v, size_t &idx)"
.br
.RI "create a JSON value from a given MessagePack vector "
.ti -1c
.RI "static \fBbasic_json\fP \fBfrom_cbor_internal\fP (const std::vector< uint8_t > &v, size_t &idx)"
.br
.RI "create a JSON value from a given CBOR vector "
.in -1c
.SS "JSON Pointer functions"

.in +1c
.ti -1c
.RI "\fBreference\fP \fBoperator[]\fP (const \fBjson_pointer\fP &ptr)"
.br
.RI "access specified element via JSON Pointer "
.ti -1c
.RI "\fBconst_reference\fP \fBoperator[]\fP (const \fBjson_pointer\fP &ptr) const"
.br
.RI "access specified element via JSON Pointer "
.ti -1c
.RI "\fBreference\fP \fBat\fP (const \fBjson_pointer\fP &ptr)"
.br
.RI "access specified element via JSON Pointer "
.ti -1c
.RI "\fBconst_reference\fP \fBat\fP (const \fBjson_pointer\fP &ptr) const"
.br
.RI "access specified element via JSON Pointer "
.ti -1c
.RI "\fBbasic_json\fP \fBflatten\fP () const"
.br
.RI "return flattened JSON value "
.ti -1c
.RI "\fBbasic_json\fP \fBunflatten\fP () const"
.br
.RI "unflatten a previously flattened JSON value "
.in -1c
.SS "JSON Patch functions"

.in +1c
.ti -1c
.RI "static \fBbasic_json\fP \fBdiff\fP (const \fBbasic_json\fP &source, const \fBbasic_json\fP &target, const std::string &path='')"
.br
.RI "creates a diff as a JSON patch "
.ti -1c
.RI "\fBbasic_json\fP \fBpatch\fP (const \fBbasic_json\fP &json_patch) const"
.br
.RI "applies a JSON patch "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType = std::string, class BooleanType = bool, class NumberIntegerType = std::int64_t, class NumberUnsignedType = std::uint64_t, class NumberFloatType = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer>
.br
class nlohmann::basic_json< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >"
a class to store JSON values 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIObjectType\fP type for JSON objects (\fCstd::map\fP by default; will be used in \fBobject_t\fP) 
.br
\fIArrayType\fP type for JSON arrays (\fCstd::vector\fP by default; will be used in \fBarray_t\fP) 
.br
\fIStringType\fP type for JSON strings and object keys (\fCstd::string\fP by default; will be used in \fBstring_t\fP) 
.br
\fIBooleanType\fP type for JSON booleans (\fCbool\fP by default; will be used in \fBboolean_t\fP) 
.br
\fINumberIntegerType\fP type for JSON integer numbers (\fCint64_t\fP by default; will be used in \fBnumber_integer_t\fP) 
.br
\fINumberUnsignedType\fP type for JSON unsigned integer numbers (\fC\fCuint64_t\fP\fP by default; will be used in \fBnumber_unsigned_t\fP) 
.br
\fINumberFloatType\fP type for JSON floating-point numbers (\fCdouble\fP by default; will be used in \fBnumber_float_t\fP) 
.br
\fIAllocatorType\fP type of the allocator to use (\fCstd::allocator\fP by default) 
.br
\fIJSONSerializer\fP the serializer to resolve internal calls to \fC\fBto_json()\fP\fP and \fC\fBfrom_json()\fP\fP (\fBadl_serializer\fP by default)
.RE
.PP
The class satisfies the following concept requirements:
.IP "\(bu" 2
Basic
.IP "  \(bu" 4
\fCDefaultConstructible\fP: JSON values can be default constructed\&. The result will be a JSON null value\&.
.IP "  \(bu" 4
\fCMoveConstructible\fP: A JSON value can be constructed from an rvalue argument\&.
.IP "  \(bu" 4
\fCCopyConstructible\fP: A JSON value can be copy-constructed from an lvalue expression\&.
.IP "  \(bu" 4
\fCMoveAssignable\fP: A JSON value van be assigned from an rvalue argument\&.
.IP "  \(bu" 4
\fCCopyAssignable\fP: A JSON value can be copy-assigned from an lvalue expression\&.
.IP "  \(bu" 4
\fCDestructible\fP: JSON values can be destructed\&.
.PP

.IP "\(bu" 2
Layout
.IP "  \(bu" 4
\fCStandardLayoutType\fP: JSON values have \fCstandard layout\fP: All non-static data members are private and standard layout types, the class has no virtual functions or (virtual) base classes\&.
.PP

.IP "\(bu" 2
Library-wide
.IP "  \(bu" 4
\fCEqualityComparable\fP: JSON values can be compared with \fC==\fP, see \fBoperator==(const_reference,const_reference)\fP\&.
.IP "  \(bu" 4
\fCLessThanComparable\fP: JSON values can be compared with \fC<\fP, see \fBoperator<(const_reference,const_reference)\fP\&.
.IP "  \(bu" 4
\fCSwappable\fP: Any JSON lvalue or rvalue of can be swapped with any lvalue or rvalue of other compatible types, using unqualified function call \fBswap()\fP\&.
.IP "  \(bu" 4
\fCNullablePointer\fP: JSON values can be compared against \fCstd::nullptr_t\fP objects which are used to model the \fCnull\fP value\&.
.PP

.IP "\(bu" 2
Container
.IP "  \(bu" 4
\fCContainer\fP: JSON values can be used like STL containers and provide iterator access\&.
.IP "  \(bu" 4
\fCReversibleContainer\fP; JSON values can be used like STL containers and provide reverse iterator access\&.
.PP

.PP
.PP
\fBInvariant:\fP
.RS 4
The member variables \fIm_value\fP and \fIm_type\fP have the following relationship:
.IP "\(bu" 2
If \fCm_type == \fBvalue_t::object\fP\fP, then \fCm_value\&.object != nullptr\fP\&.
.IP "\(bu" 2
If \fCm_type == \fBvalue_t::array\fP\fP, then \fCm_value\&.array != nullptr\fP\&.
.IP "\(bu" 2
If \fCm_type == \fBvalue_t::string\fP\fP, then \fCm_value\&.string != nullptr\fP\&. The invariants are checked by member function \fBassert_invariant()\fP\&.
.PP
.RE
.PP
.PP
\fBSee also:\fP
.RS 4
\fCRFC 7159: The JavaScript Object Notation (JSON) Data Interchange Format\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SH "Member Typedef Documentation"
.PP 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBallocator_type\fP =  AllocatorType<\fBbasic_json\fP>"

.PP
the allocator type 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBarray_t\fP =  ArrayType<\fBbasic_json\fP, AllocatorType<\fBbasic_json\fP> >"

.PP
a type for an array \fCRFC 7159\fP describes JSON arrays as follows: 
.PP
.RS 4
An array is an ordered sequence of zero or more values\&. 
.RE
.PP
.PP
To store objects in C++, a type is defined by the template parameters explained below\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIArrayType\fP container type to store arrays (e\&.g\&., \fCstd::vector\fP or \fCstd::list\fP) 
.br
\fIAllocatorType\fP allocator to use for arrays (e\&.g\&., \fCstd::allocator\fP)
.RE
.PP
.SS "Default type"
.PP
With the default values for \fIArrayType\fP (\fCstd::vector\fP) and \fIAllocatorType\fP (\fCstd::allocator\fP), the default value for \fIarray_t\fP is:
.PP
.PP
.nf
std::vector<
  basic_json, // value_type
  std::allocator<basic_json> // allocator_type
>
.fi
.PP
.PP
.SS "Limits"
.PP
\fCRFC 7159\fP specifies: 
.PP
.RS 4
An implementation may set limits on the maximum depth of nesting\&. 
.RE
.PP
.PP
In this class, the array's limit of nesting is not constraint explicitly\&. However, a maximum depth of nesting may be introduced by the compiler or runtime environment\&. A theoretical limit can be queried by calling the \fBmax_size\fP function of a JSON array\&.
.PP
.SS "Storage"
.PP
Arrays are stored as pointers in a \fBbasic_json\fP type\&. That is, for any access to array values, a pointer of type \fCarray_t*\fP must be dereferenced\&.
.PP
\fBSee also:\fP
.RS 4
\fBobject_t\fP -- \fBtype\fP for an \fBobject\fP \fBvalue\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBbasic_json_t\fP =  \fBbasic_json\fP<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>\fC [private]\fP"

.PP
workaround type for MSVC 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBboolean_t\fP =  BooleanType"

.PP
a type for a boolean \fCRFC 7159\fP implicitly describes a boolean as a type which differentiates the two literals \fCtrue\fP and \fCfalse\fP\&.
.PP
To store objects in C++, a type is defined by the template parameter \fIBooleanType\fP which chooses the type to use\&.
.PP
.SS "Default type"
.PP
With the default values for \fIBooleanType\fP (\fCbool\fP), the default value for \fIboolean_t\fP is:
.PP
.PP
.nf
bool
.fi
.PP
.PP
.SS "Storage"
.PP
Boolean values are stored directly inside a \fBbasic_json\fP type\&.
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBconst_iterator\fP =  \fBiter_impl\fP<const \fBbasic_json\fP>"

.PP
a const iterator for a \fBbasic_json\fP container 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBconst_pointer\fP =  typename std::allocator_traits<\fBallocator_type\fP>::\fBconst_pointer\fP"

.PP
the type of an element const pointer 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBconst_reference\fP =  const \fBvalue_type\fP&"

.PP
the type of an element const reference 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBconst_reverse_iterator\fP =  \fBjson_reverse_iterator\fP<typename \fBbasic_json::const_iterator\fP>"

.PP
a const reverse iterator for a \fBbasic_json\fP container 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBdifference_type\fP =  std::ptrdiff_t"

.PP
a type to represent differences between iterators 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBiterator\fP =  \fBiter_impl\fP<\fBbasic_json\fP>"

.PP
an iterator for a \fBbasic_json\fP container 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename T , typename SFINAE > using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBjson_serializer\fP =  JSONSerializer<T, SFINAE>"

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBnumber_float_t\fP =  NumberFloatType"

.PP
a type for a number (floating-point) \fCRFC 7159\fP describes numbers as follows: 
.PP
.RS 4
The representation of numbers is similar to that used in most programming languages\&. A number is represented in base 10 using decimal digits\&. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part\&. Leading zeros are not allowed\&. (\&.\&.\&.) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted\&. 
.RE
.PP
.PP
This description includes both integer and floating-point numbers\&. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number\&. Therefore, three different types, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP and \fBnumber_float_t\fP are used\&.
.PP
To store floating-point numbers in C++, a type is defined by the template parameter \fINumberFloatType\fP which chooses the type to use\&.
.PP
.SS "Default type"
.PP
With the default values for \fINumberFloatType\fP (\fCdouble\fP), the default value for \fInumber_float_t\fP is:
.PP
.PP
.nf
double
.fi
.PP
.PP
.SS "Default behavior"
.PP
.IP "\(bu" 2
The restrictions about leading zeros is not enforced in C++\&. Instead, leading zeros in floating-point literals will be ignored\&. Internally, the value will be stored as decimal number\&. For instance, the C++ floating-point literal \fC01\&.2\fP will be serialized to \fC1\&.2\fP\&. During deserialization, leading zeros yield an error\&.
.IP "\(bu" 2
Not-a-number (NaN) values will be serialized to \fCnull\fP\&.
.PP
.PP
.SS "Limits"
.PP
\fCRFC 7159\fP states: 
.PP
.RS 4
This specification allows implementations to set limits on the range and precision of numbers accepted\&. Since software that implements IEEE 754-2008 binary64 (double precision) numbers is generally available and widely used, good interoperability can be achieved by implementations that expect no more precision or range than these provide, in the sense that implementations will approximate JSON numbers within the expected precision\&. 
.RE
.PP
.PP
This implementation does exactly follow this approach, as it uses double precision floating-point numbers\&. Note values smaller than \fC-1\&.79769313486232e+308\fP and values greater than \fC1\&.79769313486232e+308\fP will be stored as NaN internally and be serialized to \fCnull\fP\&.
.PP
.SS "Storage"
.PP
Floating-point number values are stored directly inside a \fBbasic_json\fP type\&.
.PP
\fBSee also:\fP
.RS 4
\fBnumber_integer_t\fP -- \fBtype\fP for number values (integer)
.PP
\fBnumber_unsigned_t\fP -- \fBtype\fP for number values (unsigned integer)
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBnumber_integer_t\fP =  NumberIntegerType"

.PP
a type for a number (integer) \fCRFC 7159\fP describes numbers as follows: 
.PP
.RS 4
The representation of numbers is similar to that used in most programming languages\&. A number is represented in base 10 using decimal digits\&. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part\&. Leading zeros are not allowed\&. (\&.\&.\&.) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted\&. 
.RE
.PP
.PP
This description includes both integer and floating-point numbers\&. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number\&. Therefore, three different types, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP and \fBnumber_float_t\fP are used\&.
.PP
To store integer numbers in C++, a type is defined by the template parameter \fINumberIntegerType\fP which chooses the type to use\&.
.PP
.SS "Default type"
.PP
With the default values for \fINumberIntegerType\fP (\fCint64_t\fP), the default value for \fInumber_integer_t\fP is:
.PP
.PP
.nf
int64_t
.fi
.PP
.PP
.SS "Default behavior"
.PP
.IP "\(bu" 2
The restrictions about leading zeros is not enforced in C++\&. Instead, leading zeros in integer literals lead to an interpretation as octal number\&. Internally, the value will be stored as decimal number\&. For instance, the C++ integer literal \fC010\fP will be serialized to \fC8\fP\&. During deserialization, leading zeros yield an error\&.
.IP "\(bu" 2
Not-a-number (NaN) values will be serialized to \fCnull\fP\&.
.PP
.PP
.SS "Limits"
.PP
\fCRFC 7159\fP specifies: 
.PP
.RS 4
An implementation may set limits on the range and precision of numbers\&. 
.RE
.PP
.PP
When the default type is used, the maximal integer number that can be stored is \fC9223372036854775807\fP (INT64_MAX) and the minimal integer number that can be stored is \fC-9223372036854775808\fP (INT64_MIN)\&. Integer numbers that are out of range will yield over/underflow when used in a constructor\&. During deserialization, too large or small integer numbers will be automatically be stored as \fBnumber_unsigned_t\fP or \fBnumber_float_t\fP\&.
.PP
\fCRFC 7159\fP further states: 
.PP
.RS 4
Note that when such software is used, numbers that are integers and are in the range $[-2^{53}+1, 2^{53}-1]$ are interoperable in the sense that implementations will agree exactly on their numeric values\&. 
.RE
.PP
.PP
As this range is a subrange of the exactly supported range [INT64_MIN, INT64_MAX], this class's integer type is interoperable\&.
.PP
.SS "Storage"
.PP
Integer number values are stored directly inside a \fBbasic_json\fP type\&.
.PP
\fBSee also:\fP
.RS 4
\fBnumber_float_t\fP -- \fBtype\fP for number values (floating-point)
.PP
\fBnumber_unsigned_t\fP -- \fBtype\fP for number values (unsigned integer)
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBnumber_unsigned_t\fP =  NumberUnsignedType"

.PP
a type for a number (unsigned) \fCRFC 7159\fP describes numbers as follows: 
.PP
.RS 4
The representation of numbers is similar to that used in most programming languages\&. A number is represented in base 10 using decimal digits\&. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part\&. Leading zeros are not allowed\&. (\&.\&.\&.) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted\&. 
.RE
.PP
.PP
This description includes both integer and floating-point numbers\&. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number\&. Therefore, three different types, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP and \fBnumber_float_t\fP are used\&.
.PP
To store unsigned integer numbers in C++, a type is defined by the template parameter \fINumberUnsignedType\fP which chooses the type to use\&.
.PP
.SS "Default type"
.PP
With the default values for \fINumberUnsignedType\fP (\fCuint64_t\fP), the default value for \fInumber_unsigned_t\fP is:
.PP
.PP
.nf
uint64_t
.fi
.PP
.PP
.SS "Default behavior"
.PP
.IP "\(bu" 2
The restrictions about leading zeros is not enforced in C++\&. Instead, leading zeros in integer literals lead to an interpretation as octal number\&. Internally, the value will be stored as decimal number\&. For instance, the C++ integer literal \fC010\fP will be serialized to \fC8\fP\&. During deserialization, leading zeros yield an error\&.
.IP "\(bu" 2
Not-a-number (NaN) values will be serialized to \fCnull\fP\&.
.PP
.PP
.SS "Limits"
.PP
\fCRFC 7159\fP specifies: 
.PP
.RS 4
An implementation may set limits on the range and precision of numbers\&. 
.RE
.PP
.PP
When the default type is used, the maximal integer number that can be stored is \fC18446744073709551615\fP (UINT64_MAX) and the minimal integer number that can be stored is \fC0\fP\&. Integer numbers that are out of range will yield over/underflow when used in a constructor\&. During deserialization, too large or small integer numbers will be automatically be stored as \fBnumber_integer_t\fP or \fBnumber_float_t\fP\&.
.PP
\fCRFC 7159\fP further states: 
.PP
.RS 4
Note that when such software is used, numbers that are integers and are in the range $[-2^{53}+1, 2^{53}-1]$ are interoperable in the sense that implementations will agree exactly on their numeric values\&. 
.RE
.PP
.PP
As this range is a subrange (when considered in conjunction with the number_integer_t type) of the exactly supported range [0, UINT64_MAX], this class's integer type is interoperable\&.
.PP
.SS "Storage"
.PP
Integer number values are stored directly inside a \fBbasic_json\fP type\&.
.PP
\fBSee also:\fP
.RS 4
\fBnumber_float_t\fP -- \fBtype\fP for number values (floating-point) 
.PP
\fBnumber_integer_t\fP -- \fBtype\fP for number values (integer)
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBobject_t\fP =  ObjectType<StringType, \fBbasic_json\fP, std::less<StringType>, AllocatorType<std::pair<const StringType, \fBbasic_json\fP> >>"

.PP
a type for an object \fCRFC 7159\fP describes JSON objects as follows: 
.PP
.RS 4
An object is an unordered collection of zero or more name/value pairs, where a name is a string and a value is a string, number, boolean, null, object, or array\&. 
.RE
.PP
.PP
To store objects in C++, a type is defined by the template parameters described below\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIObjectType\fP the container to store objects (e\&.g\&., \fCstd::map\fP or \fCstd::unordered_map\fP) 
.br
\fIStringType\fP the type of the keys or names (e\&.g\&., \fCstd::string\fP)\&. The comparison function \fCstd::less<StringType>\fP is used to order elements inside the container\&. 
.br
\fIAllocatorType\fP the allocator to use for objects (e\&.g\&., \fCstd::allocator\fP)
.RE
.PP
.SS "Default type"
.PP
With the default values for \fIObjectType\fP (\fCstd::map\fP), \fIStringType\fP (\fCstd::string\fP), and \fIAllocatorType\fP (\fCstd::allocator\fP), the default value for \fIobject_t\fP is:
.PP
.PP
.nf
std::map<
  std::string, // key_type
  basic_json, // value_type
  std::less<std::string>, // key_compare
  std::allocator<std::pair<const std::string, basic_json>> // allocator_type
>
.fi
.PP
.PP
.SS "Behavior"
.PP
The choice of \fIobject_t\fP influences the behavior of the JSON class\&. With the default type, objects have the following behavior:
.PP
.IP "\(bu" 2
When all names are unique, objects will be interoperable in the sense that all software implementations receiving that object will agree on the name-value mappings\&.
.IP "\(bu" 2
When the names within an object are not unique, later stored name/value pairs overwrite previously stored name/value pairs, leaving the used names unique\&. For instance, \fC{'key': 1}\fP and \fC{'key': 2, 'key': 1}\fP will be treated as equal and both stored as \fC{'key': 1}\fP\&.
.IP "\(bu" 2
Internally, name/value pairs are stored in lexicographical order of the names\&. Objects will also be serialized (see \fBdump\fP) in this order\&. For instance, \fC{'b': 1, 'a': 2}\fP and \fC{'a': 2, 'b': 1}\fP will be stored and serialized as \fC{'a': 2, 'b': 1}\fP\&.
.IP "\(bu" 2
When comparing objects, the order of the name/value pairs is irrelevant\&. This makes objects interoperable in the sense that they will not be affected by these differences\&. For instance, \fC{'b': 1, 'a': 2}\fP and \fC{'a': 2, 'b': 1}\fP will be treated as equal\&.
.PP
.PP
.SS "Limits"
.PP
\fCRFC 7159\fP specifies: 
.PP
.RS 4
An implementation may set limits on the maximum depth of nesting\&. 
.RE
.PP
.PP
In this class, the object's limit of nesting is not constraint explicitly\&. However, a maximum depth of nesting may be introduced by the compiler or runtime environment\&. A theoretical limit can be queried by calling the \fBmax_size\fP function of a JSON object\&.
.PP
.SS "Storage"
.PP
Objects are stored as pointers in a \fBbasic_json\fP type\&. That is, for any access to object values, a pointer of type \fCobject_t*\fP must be dereferenced\&.
.PP
\fBSee also:\fP
.RS 4
\fBarray_t\fP -- \fBtype\fP for an \fBarray\fP \fBvalue\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0
.RE
.PP
\fBNote:\fP
.RS 4
The order name/value pairs are added to the object is \fInot\fP preserved by the library\&. Therefore, iterating an object may return name/value pairs in a different order than they were originally stored\&. In fact, keys will be traversed in alphabetical order as \fCstd::map\fP with \fCstd::less\fP is used by default\&. Please note this behavior conforms to \fCRFC 7159\fP, because any order implements the specified 'unordered' nature of JSON objects\&. 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBparser_callback_t\fP =  std::function<bool(int depth, \fBparse_event_t\fP event, \fBbasic_json\fP& parsed)>"

.PP
per-element parser callback type With a parser callback function, the result of parsing a JSON text can be influenced\&. When passed to \fBparse\fP(std::istream&, const parser_callback_t) or \fBparse(const CharT, const parser_callback_t)\fP, it is called on certain events (passed as \fBparse_event_t\fP via parameter \fIevent\fP) with a set recursion depth \fIdepth\fP and context JSON value \fIparsed\fP\&. The return value of the callback function is a boolean indicating whether the element that emitted the callback shall be kept or not\&.
.PP
We distinguish six scenarios (determined by the event type) in which the callback function can be called\&. The following table describes the values of the parameters \fIdepth\fP, \fIevent\fP, and \fIparsed\fP\&.
.PP
parameter \fIevent\fP description parameter \fIdepth\fP parameter \fIparsed\fP  \fBparse_event_t::object_start\fP the parser read \fC{\fP and started to process a JSON object depth of the parent of the JSON object a JSON value with type discarded \fBparse_event_t::key\fP the parser read a key of a value in an object depth of the currently parsed JSON object a JSON string containing the key \fBparse_event_t::object_end\fP the parser read \fC}\fP and finished processing a JSON object depth of the parent of the JSON object the parsed JSON object \fBparse_event_t::array_start\fP the parser read \fC[\fP and started to process a JSON array depth of the parent of the JSON array a JSON value with type discarded \fBparse_event_t::array_end\fP the parser read \fC]\fP and finished processing a JSON array depth of the parent of the JSON array the parsed JSON array \fBparse_event_t::value\fP the parser finished reading a JSON value depth of the value the parsed JSON value Example when certain parse events are triggered Discarding a value (i\&.e\&., returning \fCfalse\fP) has different effects depending on the context in which function was called:
.PP
.IP "\(bu" 2
Discarded values in structured types are skipped\&. That is, the parser will behave as if the discarded value was never read\&.
.IP "\(bu" 2
In case a value outside a structured type is skipped, it is replaced with \fCnull\fP\&. This case happens if the top-level element is skipped\&.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdepth\fP the depth of the recursion during parsing
.br
\fIevent\fP an event of type parse_event_t indicating the context in the callback function has been called
.br
\fIparsed\fP the current intermediate parse result; note that writing to this value has no effect for \fBparse_event_t::key\fP events
.RE
.PP
\fBReturns:\fP
.RS 4
Whether the JSON value which called the function during parsing should be kept (\fCtrue\fP) or not (\fCfalse\fP)\&. In the latter case, it is either skipped completely or replaced by an empty discarded object\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBparse(std::istream&, parser_callback_t)\fP or \fBparse(const CharT, const parser_callback_t)\fP for examples
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBpointer\fP =  typename std::allocator_traits<\fBallocator_type\fP>::\fBpointer\fP"

.PP
the type of an element pointer 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBreference\fP =  \fBvalue_type\fP&"

.PP
the type of an element reference 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBreverse_iterator\fP =  \fBjson_reverse_iterator\fP<typename \fBbasic_json::iterator\fP>"

.PP
a reverse iterator for a \fBbasic_json\fP container 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBsize_type\fP =  std::size_t"

.PP
a type to represent container sizes 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBstring_t\fP =  StringType"

.PP
a type for a string \fCRFC 7159\fP describes JSON strings as follows: 
.PP
.RS 4
A string is a sequence of zero or more Unicode characters\&. 
.RE
.PP
.PP
To store objects in C++, a type is defined by the template parameter described below\&. Unicode values are split by the JSON class into byte-sized characters during deserialization\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIStringType\fP the container to store strings (e\&.g\&., \fCstd::string\fP)\&. Note this container is used for keys/names in objects, see \fBobject_t\fP\&.
.RE
.PP
.SS "Default type"
.PP
With the default values for \fIStringType\fP (\fCstd::string\fP), the default value for \fIstring_t\fP is:
.PP
.PP
.nf
std::string
.fi
.PP
.PP
.SS "Encoding"
.PP
Strings are stored in UTF-8 encoding\&. Therefore, functions like \fCstd::string::size()\fP or \fCstd::string::length()\fP return the number of bytes in the string rather than the number of characters or glyphs\&.
.PP
.SS "String comparison"
.PP
\fCRFC 7159\fP states: 
.PP
.RS 4
Software implementations are typically required to test names of object members for equality\&. Implementations that transform the textual representation into sequences of Unicode code units and then perform the comparison numerically, code unit by code unit, are interoperable in the sense that implementations will agree in all cases on equality or inequality of two strings\&. For example, implementations that compare strings with escaped characters unconverted may incorrectly find that \fC'a\\\\b'\fP and \fC'a\\u005Cb'\fP are not equal\&. 
.RE
.PP
.PP
This implementation is interoperable as it does compare strings code unit by code unit\&.
.PP
.SS "Storage"
.PP
String values are stored as pointers in a \fBbasic_json\fP type\&. That is, for any access to string values, a pointer of type \fCstring_t*\fP must be dereferenced\&.
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBvalue_t\fP =  \fBdetail::value_t\fP"

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBvalue_type\fP =  \fBbasic_json\fP"

.PP
the type of elements in a \fBbasic_json\fP container 
.SH "Member Enumeration Documentation"
.PP 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> enum \fBnlohmann::basic_json::parse_event_t\fP : uint8_t\fC [strong]\fP"

.PP
JSON callback events\&. This enumeration lists the parser events that can trigger calling a callback function of type \fBparser_callback_t\fP during parsing\&.
.PP
Example when certain parse events are triggered 
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIobject_start \fP\fP
the parser read \fC{\fP and started to process a JSON object 
.TP
\fB\fIobject_end \fP\fP
the parser read \fC}\fP and finished processing a JSON object 
.TP
\fB\fIarray_start \fP\fP
the parser read \fC[\fP and started to process a JSON array 
.TP
\fB\fIarray_end \fP\fP
the parser read \fC]\fP and finished processing a JSON array 
.TP
\fB\fIkey \fP\fP
the parser read a key of a value in an object 
.TP
\fB\fIvalue \fP\fP
the parser finished reading a JSON value 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBbasic_json\fP (const \fBvalue_t\fP value_type)\fC [inline]\fP"

.PP
create an empty value with a given type Create an empty JSON value with a given type\&. The value will be default initialized with an empty value which depends on the type:
.PP
Value type initial value  null \fCnull\fP boolean \fCfalse\fP string \fC''\fP number \fC0\fP object \fC{}\fP array \fC[]\fP 
.PP
\fBParameters:\fP
.RS 4
\fIvalue_type\fP the type of the value to create
.RE
.PP
Constant\&.
.PP
\fBExceptions:\fP
.RS 4
\fIstd::bad_alloc\fP if allocation for object, array, or string value fails
.RE
.PP
{The following code shows the constructor for different \fBvalue_t\fP values,basic_json__value_t}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBbasic_json\fP (std::nullptr_t = \fCnullptr\fP)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
create a null object Create a \fCnull\fP JSON value\&. It either takes a null pointer as parameter (explicitly creating \fCnull\fP) or no parameter (implicitly creating \fCnull\fP)\&. The passed null pointer itself is not read -- it is only used to choose the right constructor\&.
.PP
Constant\&.
.PP
No-throw guarantee: this constructor never throws exceptions\&.
.PP
{The following code shows the constructor with and without a null pointer parameter\&.,basic_json__nullptr_t}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename CompatibleType , typename U  = detail::uncvref_t<CompatibleType>, detail::enable_if_t< not std::is_base_of< std::istream, U >::value and not std::is_same< U, basic_json_t >::value and not detail::is_basic_json_nested_type< basic_json_t, U >::value and detail::has_to_json< basic_json, U >::value, int >  = 0> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBbasic_json\fP (CompatibleType && val)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
create a JSON value This is a 'catch all' constructor for all compatible JSON types; that is, types for which a \fC\fBto_json()\fP\fP method exsits\&. The constructor forwards the parameter \fIval\fP to that method (to \fCjson_serializer<U>\fBto_json\fP\fP method with \fCU = uncvref_t<CompatibleType>\fP, to be exact)\&.
.PP
Template type \fICompatibleType\fP includes, but is not limited to, the following types:
.IP "\(bu" 2
\fBarrays\fP: \fBarray_t\fP and all kinds of compatible containers such as \fCstd::vector\fP, \fCstd::deque\fP, \fCstd::list\fP, \fCstd::forward_list\fP, \fCstd::array\fP, \fCstd::set\fP, \fCstd::unordered_set\fP, \fCstd::multiset\fP, and \fCunordered_multiset\fP with a \fCvalue_type\fP from which a \fBbasic_json\fP value can be constructed\&.
.IP "\(bu" 2
\fBobjects\fP: \fBobject_t\fP and all kinds of compatible associative containers such as \fCstd::map\fP, \fCstd::unordered_map\fP, \fCstd::multimap\fP, and \fCstd::unordered_multimap\fP with a \fCkey_type\fP compatible to \fBstring_t\fP and a \fCvalue_type\fP from which a \fBbasic_json\fP value can be constructed\&.
.IP "\(bu" 2
\fBstrings\fP: \fBstring_t\fP, string literals, and all compatible string containers can be used\&.
.IP "\(bu" 2
\fBnumbers\fP: \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP, \fBnumber_float_t\fP, and all convertible number types such as \fCint\fP, \fCsize_t\fP, \fCint64_t\fP, \fCfloat\fP or \fCdouble\fP can be used\&.
.IP "\(bu" 2
\fBboolean\fP: \fBboolean_t\fP / \fCbool\fP can be used\&.
.PP
.PP
See the examples below\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fICompatibleType\fP a type such that:
.IP "\(bu" 2
\fICompatibleType\fP is not derived from \fCstd::istream\fP,
.IP "\(bu" 2
\fICompatibleType\fP is not \fBbasic_json\fP (to avoid hijacking copy/move constructors),
.IP "\(bu" 2
\fICompatibleType\fP is not a \fBbasic_json\fP nested type (e\&.g\&., \fBjson_pointer\fP, \fBiterator\fP, etc \&.\&.\&.)
.IP "\(bu" 2
\fBjson_serializer<U>\fP has a \fCto_json(basic_json_t&, CompatibleType&&)\fP method
.PP
.br
\fIU\fP = \fCuncvref_t<CompatibleType>\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIval\fP the value to be forwarded
.RE
.PP
Usually linear in the size of the passed \fIval\fP, also depending on the implementation of the called \fC\fBto_json()\fP\fP method\&.
.PP
\fBExceptions:\fP
.RS 4
\fIwhat\fP \fCjson_serializer<U>\fBto_json()\fP\fP throws
.RE
.PP
{The following code shows the constructor with several compatible types\&.,basic_json__CompatibleType}
.PP
\fBSince:\fP
.RS 4
version 2\&.1\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBbasic_json\fP (std::initializer_list< \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > > init, bool type_deduction = \fCtrue\fP, \fBvalue_t\fP manual_type = \fC\fBvalue_t::array\fP\fP)\fC [inline]\fP"

.PP
create a container (array or object) from an initializer list Creates a JSON value of type array or object from the passed initializer list \fIinit\fP\&. In case \fItype_deduction\fP is \fCtrue\fP (default), the type of the JSON value to be created is deducted from the initializer list \fIinit\fP according to the following rules:
.PP
.IP "1." 4
If the list is empty, an empty JSON object value \fC{}\fP is created\&.
.IP "2." 4
If the list consists of pairs whose first element is a string, a JSON object value is created where the first elements of the pairs are treated as keys and the second elements are as values\&.
.IP "3." 4
In all other cases, an array is created\&.
.PP
.PP
The rules aim to create the best fit between a C++ initializer list and JSON values\&. The rationale is as follows:
.PP
.IP "1." 4
The empty initializer list is written as \fC{}\fP which is exactly an empty JSON object\&.
.IP "2." 4
C++ has now way of describing mapped types other than to list a list of pairs\&. As JSON requires that keys must be of type string, rule 2 is the weakest constraint one can pose on initializer lists to interpret them as an object\&.
.IP "3." 4
In all other cases, the initializer list could not be interpreted as JSON object type, so interpreting it as JSON array type is safe\&.
.PP
.PP
With the rules described above, the following JSON values cannot be expressed by an initializer list:
.PP
.IP "\(bu" 2
the empty array (\fC[]\fP): use \fBarray(std::initializer_list<basic_json>)\fP with an empty initializer list in this case
.IP "\(bu" 2
arrays whose elements satisfy rule 2: use \fBarray(std::initializer_list<basic_json>)\fP with the same initializer list in this case
.PP
.PP
\fBNote:\fP
.RS 4
When used without parentheses around an empty initializer list, \fBbasic_json()\fP is called instead of this function, yielding the JSON null value\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIinit\fP initializer list with JSON values
.br
\fItype_deduction\fP internal parameter; when set to \fCtrue\fP, the type of the JSON value is deducted from the initializer list \fIinit\fP; when set to \fCfalse\fP, the type provided via \fImanual_type\fP is forced\&. This mode is used by the functions \fBarray(std::initializer_list<basic_json>)\fP and \fBobject(std::initializer_list<basic_json>)\fP\&.
.br
\fImanual_type\fP internal parameter; when \fItype_deduction\fP is set to \fCfalse\fP, the created JSON value will use the provided type (only \fBvalue_t::array\fP and \fBvalue_t::object\fP are valid); when \fItype_deduction\fP is set to \fCtrue\fP, this parameter has no effect
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if \fItype_deduction\fP is \fCfalse\fP, \fImanual_type\fP is \fC\fBvalue_t::object\fP\fP, but \fIinit\fP contains an element which is not a pair whose first element is a string; example: \fC'cannot create object from
initializer list'\fP
.RE
.PP
Linear in the size of the initializer list \fIinit\fP\&.
.PP
{The example below shows how JSON values are created from initializer lists\&.,basic_json__list_init_t}
.PP
\fBSee also:\fP
.RS 4
\fBarray(std::initializer_list<basic_json>)\fP -- \fBcreate\fP a JSON \fBarray\fP \fBvalue\fP from an initializer list 
.PP
\fBobject(std::initializer_list<basic_json>)\fP -- \fBcreate\fP a JSON \fBobject\fP \fBvalue\fP from an initializer list
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBbasic_json\fP (\fBsize_type\fP cnt, const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & val)\fC [inline]\fP"

.PP
construct an array with count copies of given value Constructs a JSON array value by creating \fIcnt\fP copies of a passed value\&. In case \fIcnt\fP is \fC0\fP, an empty array is created\&. As postcondition, \fCstd::distance(\fBbegin()\fP,\fBend()\fP) == cnt\fP holds\&.
.PP
\fBParameters:\fP
.RS 4
\fIcnt\fP the number of JSON copies of \fIval\fP to create 
.br
\fIval\fP the JSON value to copy
.RE
.PP
Linear in \fIcnt\fP\&.
.PP
{The following code shows examples for the \fBbasic_json\fP(size_type\\, const \fBbasic_json\fP&) constructor\&.,basic_json__size_type_basic_json}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<class InputIT , typename std::enable_if< std::is_same< InputIT, typename basic_json_t::iterator >::value or std::is_same< InputIT, typename basic_json_t::const_iterator >::value, int >::type  = 0> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBbasic_json\fP (InputIT first, InputIT last)\fC [inline]\fP"

.PP
construct a JSON container given an iterator range Constructs the JSON value with the contents of the range \fC[first, last)\fP\&. The semantics depends on the different types a JSON value can have:
.IP "\(bu" 2
In case of primitive types (number, boolean, or string), \fIfirst\fP must be \fC\fBbegin()\fP\fP and \fIlast\fP must be \fC\fBend()\fP\fP\&. In this case, the value is copied\&. Otherwise, std::out_of_range is thrown\&.
.IP "\(bu" 2
In case of structured types (array, object), the constructor behaves as similar versions for \fCstd::vector\fP\&.
.IP "\(bu" 2
In case of a null type, std::domain_error is thrown\&.
.PP
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputIT\fP an input iterator type (\fBiterator\fP or \fBconst_iterator\fP)
.RE
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP begin of the range to copy from (included) 
.br
\fIlast\fP end of the range to copy from (excluded)
.RE
.PP
\fBPrecondition:\fP
.RS 4
Iterators \fIfirst\fP and \fIlast\fP must be initialized\&. \fBThis precondition is enforced with an assertion\&.\fP
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if iterators are not compatible; that is, do not belong to the same JSON value; example: \fC'iterators are not compatible'\fP 
.br
\fIstd::out_of_range\fP if iterators are for a primitive type (number, boolean, or string) where an out of range error can be detected easily; example: \fC'iterators out of range'\fP 
.br
\fIstd::bad_alloc\fP if allocation for object, array, or string fails 
.br
\fIstd::domain_error\fP if called with a null value; example: \fC'cannot
use construct with iterators from null'\fP
.RE
.PP
Linear in distance between \fIfirst\fP and \fIlast\fP\&.
.PP
{The example below shows several ways to create JSON values by specifying a subrange with iterators\&.,basic_json__InputIt_InputIt}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBJSON_DEPRECATED\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBbasic_json\fP (std::istream & i, const \fBparser_callback_t\fP cb = \fCnullptr\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
construct a JSON value given an input stream 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP stream to read a serialized JSON value from 
.br
\fIcb\fP a parser callback function of type \fBparser_callback_t\fP which is used to control the deserialization by filtering unwanted values (optional)
.RE
.PP
Linear in the length of the input\&. The parser is a predictive LL(1) parser\&. The complexity can be higher if the parser callback function \fIcb\fP has a super-linear complexity\&.
.PP
\fBNote:\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
This constructor is deprecated and will be removed in version 3\&.0\&.0 to unify the interface of the library\&. Deserialization will be done by stream operators or by calling one of the \fCparse\fP functions, e\&.g\&. \fBparse(std::istream&, const parser_callback_t)\fP\&. That is, calls like \fCjson j(i);\fP for an input stream \fIi\fP need to be replaced by \fCjson j = json::parse(i);\fP\&. See the example below\&.
.RE
.PP
.PP
{The example below demonstrates constructing a JSON value from a \fCstd::stringstream\fP with and without callback function\&.,basic_json__istream}
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.0, deprecated in version 2\&.0\&.3, to be removed in version 3\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBbasic_json\fP (const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & other)\fC [inline]\fP"

.PP
copy constructor Creates a copy of a given JSON value\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP the JSON value to copy
.RE
.PP
Linear in the size of \fIother\fP\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is linear\&.
.IP "\(bu" 2
As postcondition, it holds: \fCother == basic_json(other)\fP\&.
.PP
.PP
\fBExceptions:\fP
.RS 4
\fIstd::bad_alloc\fP if allocation for object, array, or string fails\&.
.RE
.PP
{The following code shows an example for the copy constructor\&.,basic_json__basic_json}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBbasic_json\fP (\fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > && other)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
move constructor Move constructor\&. Constructs a JSON value with the contents of the given value \fIother\fP using move semantics\&. It 'steals' the resources from \fIother\fP and leaves it as JSON null value\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP value to move to this object
.RE
.PP
\fBPostcondition:\fP
.RS 4
\fIother\fP is a JSON null value
.RE
.PP
Constant\&.
.PP
{The code below shows the move constructor explicitly called via std::move\&.,basic_json__moveconstructor}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::~\fBbasic_json\fP ()\fC [inline]\fP"

.PP
destructor Destroys the JSON value and frees all allocated memory\&.
.PP
Linear\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is linear\&.
.IP "\(bu" 2
All stored elements are destroyed and all memory is freed\&.
.PP
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename T > static void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::add_to_vector (std::vector< uint8_t > & vec, size_t bytes, const T number)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.PP
\fBNote:\fP
.RS 4
Some code in the switch cases has been copied, because otherwise copilers would complain about implicit fallthrough and there is no portable attribute to mute such warnings\&. 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::array (std::initializer_list< \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > > init = \fCstd::initializer_list<\fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >>()\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
explicitly create an array from an initializer list Creates a JSON array value from a given initializer list\&. That is, given a list of values \fCa, b, c\fP, creates the JSON value \fC[a, b, c]\fP\&. If the initializer list is empty, the empty array \fC[]\fP is created\&.
.PP
\fBNote:\fP
.RS 4
This function is only needed to express two edge cases that cannot be realized with the initializer list constructor (\fBbasic_json(std::initializer_list<basic_json>, bool, value_t)\fP)\&. These cases are:
.IP "1." 4
creating an array whose elements are all pairs whose first element is a string -- in this case, the initializer list constructor would create an object, taking the first elements as keys
.IP "2." 4
creating an empty array -- passing the empty initializer list to the initializer list constructor yields an empty object
.PP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIinit\fP initializer list with JSON values to create an array from (optional)
.RE
.PP
\fBReturns:\fP
.RS 4
JSON array value
.RE
.PP
Linear in the size of \fIinit\fP\&.
.PP
{The following code shows an example for the \fCarray\fP function\&.,array}
.PP
\fBSee also:\fP
.RS 4
\fBbasic_json(std::initializer_list<basic_json>, bool, value_t)\fP -- \fBcreate\fP a JSON \fBvalue\fP from an initializer list 
.PP
\fBobject(std::initializer_list<basic_json>)\fP -- \fBcreate\fP a JSON \fBobject\fP \fBvalue\fP from an initializer list
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::assert_invariant () const\fC [inline]\fP, \fC [private]\fP"

.PP
checks the class invariants This function asserts the class invariants\&. It needs to be called at the end of every constructor to make sure that created objects respect the invariant\&. Furthermore, it has to be called each time the type of a JSON value is changed, because the invariant expresses a relationship between \fIm_type\fP and \fIm_value\fP\&. 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::at (\fBsize_type\fP idx)\fC [inline]\fP"

.PP
access specified array element with bounds checking Returns a reference to the element at specified location \fIidx\fP, with bounds checking\&.
.PP
\fBParameters:\fP
.RS 4
\fIidx\fP index of the element to access
.RE
.PP
\fBReturns:\fP
.RS 4
reference to the element at index \fIidx\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if the JSON value is not an array; example: \fC'cannot use at() with string'\fP 
.br
\fIstd::out_of_range\fP if the index \fIidx\fP is out of range of the array; that is, \fCidx >= \fBsize()\fP\fP; example: \fC'array index 7 is out of range'\fP
.RE
.PP
Constant\&.
.PP
{The example below shows how array elements can be read and written using \fC\fBat()\fP\fP\&.,at__size_type}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_reference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::at (\fBsize_type\fP idx) const\fC [inline]\fP"

.PP
access specified array element with bounds checking Returns a const reference to the element at specified location \fIidx\fP, with bounds checking\&.
.PP
\fBParameters:\fP
.RS 4
\fIidx\fP index of the element to access
.RE
.PP
\fBReturns:\fP
.RS 4
const reference to the element at index \fIidx\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if the JSON value is not an array; example: \fC'cannot use at() with string'\fP 
.br
\fIstd::out_of_range\fP if the index \fIidx\fP is out of range of the array; that is, \fCidx >= \fBsize()\fP\fP; example: \fC'array index 7 is out of range'\fP
.RE
.PP
Constant\&.
.PP
{The example below shows how array elements can be read using \fC\fBat()\fP\fP\&.,at__size_type_const}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::at (const typename object_t::key_type & key)\fC [inline]\fP"

.PP
access specified object element with bounds checking Returns a reference to the element at with specified key \fIkey\fP, with bounds checking\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns:\fP
.RS 4
reference to the element at key \fIkey\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if the JSON value is not an object; example: \fC'cannot use at() with boolean'\fP 
.br
\fIstd::out_of_range\fP if the key \fIkey\fP is is not stored in the object; that is, \fCfind(key) == \fBend()\fP\fP; example: \fC'key 'the fast' not found'\fP
.RE
.PP
Logarithmic in the size of the container\&.
.PP
{The example below shows how object elements can be read and written using \fC\fBat()\fP\fP\&.,at__object_t_key_type}
.PP
\fBSee also:\fP
.RS 4
\fBoperator[](const typename object_t::key_type&)\fP for unchecked access by \fBreference\fP 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_reference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::at (const typename object_t::key_type & key) const\fC [inline]\fP"

.PP
access specified object element with bounds checking Returns a const reference to the element at with specified key \fIkey\fP, with bounds checking\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns:\fP
.RS 4
const reference to the element at key \fIkey\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if the JSON value is not an object; example: \fC'cannot use at() with boolean'\fP 
.br
\fIstd::out_of_range\fP if the key \fIkey\fP is is not stored in the object; that is, \fCfind(key) == \fBend()\fP\fP; example: \fC'key 'the fast' not found'\fP
.RE
.PP
Logarithmic in the size of the container\&.
.PP
{The example below shows how object elements can be read using \fC\fBat()\fP\fP\&.,at__object_t_key_type_const}
.PP
\fBSee also:\fP
.RS 4
\fBoperator[](const typename object_t::key_type&)\fP for unchecked access by \fBreference\fP 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::at (const \fBjson_pointer\fP & ptr)\fC [inline]\fP"

.PP
access specified element via JSON Pointer Returns a reference to the element at with specified JSON pointer \fIptr\fP, with bounds checking\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP JSON pointer to the desired element
.RE
.PP
\fBReturns:\fP
.RS 4
reference to the element pointed to by \fIptr\fP 
.RE
.PP
Constant\&.
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP if the JSON pointer can not be resolved 
.br
\fIstd::domain_error\fP if an array index begins with '0' 
.br
\fIstd::invalid_argument\fP if an array index was not a number
.RE
.PP
{The behavior is shown in the example\&.,at_json_pointer}
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_reference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::at (const \fBjson_pointer\fP & ptr) const\fC [inline]\fP"

.PP
access specified element via JSON Pointer Returns a const reference to the element at with specified JSON pointer \fIptr\fP, with bounds checking\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP JSON pointer to the desired element
.RE
.PP
\fBReturns:\fP
.RS 4
reference to the element pointed to by \fIptr\fP 
.RE
.PP
Constant\&.
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP if the JSON pointer can not be resolved 
.br
\fIstd::domain_error\fP if an array index begins with '0' 
.br
\fIstd::invalid_argument\fP if an array index was not a number
.RE
.PP
{The behavior is shown in the example\&.,at_json_pointer_const}
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::back ()\fC [inline]\fP"

.PP
access the last element Returns a reference to the last element in the container\&. For a JSON container \fCc\fP, the expression \fCc\&.back()\fP is equivalent to 
.PP
.nf
auto tmp = c\&.end();
--tmp;
return *tmp;

.fi
.PP
.PP
\fBReturns:\fP
.RS 4
In case of a structured type (array or object), a reference to the last element is returned\&. In case of number, string, or boolean values, a reference to the value is returned\&.
.RE
.PP
Constant\&.
.PP
\fBPrecondition:\fP
.RS 4
The JSON value must not be \fCnull\fP (would throw \fCstd::out_of_range\fP) or an empty array or object (undefined behavior, \fBguarded by assertions\fP)\&. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
The JSON value remains unchanged\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP when called on \fCnull\fP value\&.
.RE
.PP
{The following code shows an example for \fC\fBback()\fP\fP\&.,back}
.PP
\fBSee also:\fP
.RS 4
\fBfront()\fP -- access the first element
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_reference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::back () const\fC [inline]\fP"

.PP
access the last element Returns a reference to the last element in the container\&. For a JSON container \fCc\fP, the expression \fCc\&.back()\fP is equivalent to 
.PP
.nf
auto tmp = c\&.end();
--tmp;
return *tmp;

.fi
.PP
.PP
\fBReturns:\fP
.RS 4
In case of a structured type (array or object), a reference to the last element is returned\&. In case of number, string, or boolean values, a reference to the value is returned\&.
.RE
.PP
Constant\&.
.PP
\fBPrecondition:\fP
.RS 4
The JSON value must not be \fCnull\fP (would throw \fCstd::out_of_range\fP) or an empty array or object (undefined behavior, \fBguarded by assertions\fP)\&. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
The JSON value remains unchanged\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP when called on \fCnull\fP value\&.
.RE
.PP
{The following code shows an example for \fC\fBback()\fP\fP\&.,back}
.PP
\fBSee also:\fP
.RS 4
\fBfront()\fP -- access the first element
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBiterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::begin ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns an iterator to the first element Returns an iterator to the first element\&.
.PP
Illustration from cppreference\&.com 
.PP
\fBReturns:\fP
.RS 4
iterator to the first element
.RE
.PP
Constant\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.PP
.PP
{The following code shows an example for \fC\fBbegin()\fP\fP\&.,begin}
.PP
\fBSee also:\fP
.RS 4
\fBcbegin()\fP -- returns a const \fBiterator\fP to the beginning 
.PP
\fBend()\fP -- returns an \fBiterator\fP to the \fBend\fP 
.PP
\fBcend()\fP -- returns a const \fBiterator\fP to the \fBend\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_iterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::begin () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const iterator to the first element Returns a const iterator to the first element\&.
.PP
Illustration from cppreference\&.com 
.PP
\fBReturns:\fP
.RS 4
const iterator to the first element
.RE
.PP
Constant\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBbegin()\fP\fP\&.
.PP
.PP
{The following code shows an example for \fC\fBcbegin()\fP\fP\&.,cbegin}
.PP
\fBSee also:\fP
.RS 4
\fBbegin()\fP -- returns an \fBiterator\fP to the beginning 
.PP
\fBend()\fP -- returns an \fBiterator\fP to the \fBend\fP 
.PP
\fBcend()\fP -- returns a const \fBiterator\fP to the \fBend\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_iterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::cbegin () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const iterator to the first element Returns a const iterator to the first element\&.
.PP
Illustration from cppreference\&.com 
.PP
\fBReturns:\fP
.RS 4
const iterator to the first element
.RE
.PP
Constant\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBbegin()\fP\fP\&.
.PP
.PP
{The following code shows an example for \fC\fBcbegin()\fP\fP\&.,cbegin}
.PP
\fBSee also:\fP
.RS 4
\fBbegin()\fP -- returns an \fBiterator\fP to the beginning 
.PP
\fBend()\fP -- returns an \fBiterator\fP to the \fBend\fP 
.PP
\fBcend()\fP -- returns a const \fBiterator\fP to the \fBend\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_iterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::cend () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const iterator to one past the last element Returns a const iterator to one past the last element\&.
.PP
Illustration from cppreference\&.com 
.PP
\fBReturns:\fP
.RS 4
const iterator one past the last element
.RE
.PP
Constant\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBend()\fP\fP\&.
.PP
.PP
{The following code shows an example for \fC\fBcend()\fP\fP\&.,cend}
.PP
\fBSee also:\fP
.RS 4
\fBend()\fP -- returns an \fBiterator\fP to the \fBend\fP 
.PP
\fBbegin()\fP -- returns an \fBiterator\fP to the beginning 
.PP
\fBcbegin()\fP -- returns a const \fBiterator\fP to the beginning
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::check_length (const size_t size, const size_t len, const size_t offset)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::clear ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
clears the contents Clears the content of a JSON value and resets it to the default value as if \fBbasic_json(value_t)\fP would have been called:
.PP
Value type initial value  null \fCnull\fP boolean \fCfalse\fP string \fC''\fP number \fC0\fP object \fC{}\fP array \fC[]\fP Linear in the size of the JSON value\&.
.PP
{The example below shows the effect of \fC\fBclear()\fP\fP to different JSON types\&.,clear}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBsize_type\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::count (typename object_t::key_type key) const\fC [inline]\fP"

.PP
returns the number of occurrences of a key in a JSON object Returns the number of elements with key \fIkey\fP\&. If ObjectType is the default \fCstd::map\fP type, the return value will always be \fC0\fP (\fIkey\fP was not found) or \fC1\fP (\fIkey\fP was found)\&.
.PP
\fBNote:\fP
.RS 4
This method always returns \fC0\fP when executed on a JSON type that is not an object\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key value of the element to count
.RE
.PP
\fBReturns:\fP
.RS 4
Number of elements with key \fIkey\fP\&. If the JSON value is not an object, the return value will be \fC0\fP\&.
.RE
.PP
Logarithmic in the size of the JSON object\&.
.PP
{The example shows how \fC\fBcount()\fP\fP is used\&.,count}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_reverse_iterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::crbegin () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const reverse iterator to the last element Returns a const iterator to the reverse-beginning; that is, the last element\&.
.PP
Illustration from cppreference\&.com  Constant\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCReversibleContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBrbegin()\fP\fP\&.
.PP
.PP
{The following code shows an example for \fC\fBcrbegin()\fP\fP\&.,crbegin}
.PP
\fBSee also:\fP
.RS 4
\fBrbegin()\fP -- returns a reverse \fBiterator\fP to the beginning 
.PP
\fBrend()\fP -- returns a reverse \fBiterator\fP to the \fBend\fP 
.PP
\fBcrend()\fP -- returns a const reverse \fBiterator\fP to the \fBend\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename T , typename\&.\&.\&. Args> static T* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::create (Args &&\&.\&.\&. args)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.PP
helper for exception-safe object creation 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_reverse_iterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::crend () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const reverse iterator to one before the first Returns a const reverse iterator to the reverse-end; that is, one before the first element\&.
.PP
Illustration from cppreference\&.com  Constant\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCReversibleContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBrend()\fP\fP\&.
.PP
.PP
{The following code shows an example for \fC\fBcrend()\fP\fP\&.,crend}
.PP
\fBSee also:\fP
.RS 4
\fBrend()\fP -- returns a reverse \fBiterator\fP to the \fBend\fP 
.PP
\fBrbegin()\fP -- returns a reverse \fBiterator\fP to the beginning 
.PP
\fBcrbegin()\fP -- returns a const reverse \fBiterator\fP to the beginning
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::diff (const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & source, const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & target, const std::string & path = \fC''\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
creates a diff as a JSON patch Creates a \fCJSON Patch\fP so that value \fIsource\fP can be changed into the value \fItarget\fP by calling \fBpatch\fP function\&.
.PP
\fBInvariant:\fP
.RS 4
For two JSON values \fIsource\fP and \fItarget\fP, the following code yields always \fCtrue\fP: 
.PP
.nf
source\&.patch(diff(source, target)) == target;

.fi
.PP
.RE
.PP
\fBNote:\fP
.RS 4
Currently, only \fCremove\fP, \fCadd\fP, and \fCreplace\fP operations are generated\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsource\fP JSON value to compare from 
.br
\fItarget\fP JSON value to compare against 
.br
\fIpath\fP helper value to create JSON pointers
.RE
.PP
\fBReturns:\fP
.RS 4
a JSON patch to convert the \fIsource\fP to \fItarget\fP 
.RE
.PP
Linear in the lengths of \fIsource\fP and \fItarget\fP\&.
.PP
{The following code shows how a JSON patch is created as a diff for two JSON values\&.,diff}
.PP
\fBSee also:\fP
.RS 4
\fBpatch\fP -- apply a JSON \fBpatch\fP
.PP
\fCRFC 6902 (JSON Patch)\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBstring_t\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::dump (const int indent = \fC\-1\fP) const\fC [inline]\fP"

.PP
serialization Serialization function for JSON values\&. The function tries to mimic Python's \fCjson\&.dumps()\fP function, and currently supports its \fIindent\fP parameter\&.
.PP
\fBParameters:\fP
.RS 4
\fIindent\fP If indent is nonnegative, then array elements and object members will be pretty-printed with that indent level\&. An indent level of \fC0\fP will only insert newlines\&. \fC-1\fP (the default) selects the most compact representation\&.
.RE
.PP
\fBReturns:\fP
.RS 4
string containing the serialization of the JSON value
.RE
.PP
Linear\&.
.PP
{The following example shows the effect of different \fIindent\fP parameters to the result of the serialization\&.,dump}
.PP
\fBSee also:\fP
.RS 4
https://docs.python.org/2/library/json.html#json.dump
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::dump (std::ostream & o, const bool pretty_print, const unsigned int indent_step, const unsigned int current_indent = \fC0\fP) const\fC [inline]\fP, \fC [private]\fP"

.PP
internal implementation of the serialization function This function is called by the public member function dump and organizes the serialization internally\&. The indentation level is propagated as additional parameter\&. In case of arrays and objects, the function is called recursively\&. Note that
.PP
.IP "\(bu" 2
strings and object keys are escaped using \fC\fBescape_string()\fP\fP
.IP "\(bu" 2
integer numbers are converted implicitly via \fCoperator<<\fP
.IP "\(bu" 2
floating-point numbers are converted to a string using \fC'%g'\fP format
.PP
.PP
\fBParameters:\fP
.RS 4
\fIo\fP stream to write to 
.br
\fIpretty_print\fP whether the output shall be pretty-printed 
.br
\fIindent_step\fP the indent level 
.br
\fIcurrent_indent\fP the current indent level (only used internally) 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<class\&.\&.\&. Args> std::pair<\fBiterator\fP, bool> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::emplace (Args &&\&.\&.\&. args)\fC [inline]\fP"

.PP
add an object to an object if key does not exist Inserts a new element into a JSON object constructed in-place with the given \fIargs\fP if there is no element with the key in the container\&. If the function is called on a JSON null value, an empty object is created before appending the value created from \fIargs\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIargs\fP arguments to forward to a constructor of \fBbasic_json\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIArgs\fP compatible types to create a \fBbasic_json\fP object
.RE
.PP
\fBReturns:\fP
.RS 4
a pair consisting of an iterator to the inserted element, or the already-existing element if no insertion happened, and a bool denoting whether the insertion took place\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when called on a type other than JSON object or null; example: \fC'cannot use emplace() with number'\fP
.RE
.PP
Logarithmic in the size of the container, O(log(\fC\fBsize()\fP\fP))\&.
.PP
{The example shows how \fC\fBemplace()\fP\fP can be used to add elements to a JSON object\&. Note how the \fCnull\fP value was silently converted to a JSON object\&. Further note how no value is added if there was already one value stored with the same key\&.,emplace}
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.8 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<class\&.\&.\&. Args> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::emplace_back (Args &&\&.\&.\&. args)\fC [inline]\fP"

.PP
add an object to an array Creates a JSON value from the passed parameters \fIargs\fP to the end of the JSON value\&. If the function is called on a JSON null value, an empty array is created before appending the value created from \fIargs\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIargs\fP arguments to forward to a constructor of \fBbasic_json\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIArgs\fP compatible types to create a \fBbasic_json\fP object
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when called on a type other than JSON array or null; example: \fC'cannot use emplace_back() with number'\fP
.RE
.PP
Amortized constant\&.
.PP
{The example shows how \fC\fBpush_back()\fP\fP can be used to add elements to a JSON array\&. Note how the \fCnull\fP value was silently converted to a JSON array\&.,emplace_back}
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.8 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::empty () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
checks whether the container is empty Checks if a JSON value has no elements\&.
.PP
\fBReturns:\fP
.RS 4
The return value depends on the different types and is defined as follows: Value type return value  null \fCtrue\fP boolean \fCfalse\fP string \fCfalse\fP number \fCfalse\fP object result of function \fCobject_t::empty()\fP array result of function \fCarray_t::empty()\fP 
.RE
.PP
\fBNote:\fP
.RS 4
This function does not return whether a string stored as JSON value is empty - it returns whether the JSON container itself is empty which is false in the case of a string\&.
.RE
.PP
Constant, as long as \fBarray_t\fP and \fBobject_t\fP satisfy the Container concept; that is, their \fC\fBempty()\fP\fP functions have constant complexity\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fC\fBbegin()\fP == \fBend()\fP\fP\&.
.PP
.PP
{The following code uses \fC\fBempty()\fP\fP to check if a JSON object contains any elements\&.,empty}
.PP
\fBSee also:\fP
.RS 4
\fBsize()\fP -- returns the number of elements
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBiterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::end ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns an iterator to one past the last element Returns an iterator to one past the last element\&.
.PP
Illustration from cppreference\&.com 
.PP
\fBReturns:\fP
.RS 4
iterator one past the last element
.RE
.PP
Constant\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.PP
.PP
{The following code shows an example for \fC\fBend()\fP\fP\&.,end}
.PP
\fBSee also:\fP
.RS 4
\fBcend()\fP -- returns a const \fBiterator\fP to the \fBend\fP 
.PP
\fBbegin()\fP -- returns an \fBiterator\fP to the beginning 
.PP
\fBcbegin()\fP -- returns a const \fBiterator\fP to the beginning
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_iterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::end () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const iterator to one past the last element Returns a const iterator to one past the last element\&.
.PP
Illustration from cppreference\&.com 
.PP
\fBReturns:\fP
.RS 4
const iterator one past the last element
.RE
.PP
Constant\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBend()\fP\fP\&.
.PP
.PP
{The following code shows an example for \fC\fBcend()\fP\fP\&.,cend}
.PP
\fBSee also:\fP
.RS 4
\fBend()\fP -- returns an \fBiterator\fP to the \fBend\fP 
.PP
\fBbegin()\fP -- returns an \fBiterator\fP to the beginning 
.PP
\fBcbegin()\fP -- returns a const \fBiterator\fP to the beginning
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<class IteratorType , typename std::enable_if< std::is_same< IteratorType, typename basic_json_t::iterator >::value or std::is_same< IteratorType, typename basic_json_t::const_iterator >::value, int >::type  = 0> IteratorType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::erase (IteratorType pos)\fC [inline]\fP"

.PP
remove element given an iterator Removes the element specified by iterator \fIpos\fP\&. The iterator \fIpos\fP must be valid and dereferenceable\&. Thus the \fC\fBend()\fP\fP iterator (which is valid, but is not dereferenceable) cannot be used as a value for \fIpos\fP\&.
.PP
If called on a primitive type other than \fCnull\fP, the resulting JSON value will be \fCnull\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP iterator to the element to remove 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator following the last removed element\&. If the iterator \fIpos\fP refers to the last element, the \fC\fBend()\fP\fP iterator is returned\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIIteratorType\fP an \fBiterator\fP or \fBconst_iterator\fP
.RE
.PP
\fBPostcondition:\fP
.RS 4
Invalidates iterators and references at or after the point of the erase, including the \fC\fBend()\fP\fP iterator\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if called on a \fCnull\fP value; example: \fC'cannot
use erase() with null'\fP 
.br
\fIstd::domain_error\fP if called on an iterator which does not belong to the current JSON value; example: \fC'iterator does not fit current value'\fP 
.br
\fIstd::out_of_range\fP if called on a primitive type with invalid iterator (i\&.e\&., any iterator which is not \fC\fBbegin()\fP\fP); example: \fC'iterator
out of range'\fP
.RE
.PP
The complexity depends on the type:
.IP "\(bu" 2
objects: amortized constant
.IP "\(bu" 2
arrays: linear in distance between \fIpos\fP and the end of the container
.IP "\(bu" 2
strings: linear in the length of the string
.IP "\(bu" 2
other types: constant
.PP
.PP
{The example shows the result of \fC\fBerase()\fP\fP for different JSON types\&.,erase__IteratorType}
.PP
\fBSee also:\fP
.RS 4
\fBerase(IteratorType, IteratorType)\fP -- removes the elements in the given range 
.PP
\fBerase(const typename object_t::key_type&)\fP -- removes the element from an \fBobject\fP \fBat\fP the given key 
.PP
\fBerase(const size_type)\fP -- removes the element from an \fBarray\fP \fBat\fP the given index
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<class IteratorType , typename std::enable_if< std::is_same< IteratorType, typename basic_json_t::iterator >::value or std::is_same< IteratorType, typename basic_json_t::const_iterator >::value, int >::type  = 0> IteratorType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::erase (IteratorType first, IteratorType last)\fC [inline]\fP"

.PP
remove elements given an iterator range Removes the element specified by the range \fC[first; last)\fP\&. The iterator \fIfirst\fP does not need to be dereferenceable if \fCfirst == last\fP: erasing an empty range is a no-op\&.
.PP
If called on a primitive type other than \fCnull\fP, the resulting JSON value will be \fCnull\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP iterator to the beginning of the range to remove 
.br
\fIlast\fP iterator past the end of the range to remove 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator following the last removed element\&. If the iterator \fIsecond\fP refers to the last element, the \fC\fBend()\fP\fP iterator is returned\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIIteratorType\fP an \fBiterator\fP or \fBconst_iterator\fP
.RE
.PP
\fBPostcondition:\fP
.RS 4
Invalidates iterators and references at or after the point of the erase, including the \fC\fBend()\fP\fP iterator\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if called on a \fCnull\fP value; example: \fC'cannot
use erase() with null'\fP 
.br
\fIstd::domain_error\fP if called on iterators which does not belong to the current JSON value; example: \fC'iterators do not fit current value'\fP 
.br
\fIstd::out_of_range\fP if called on a primitive type with invalid iterators (i\&.e\&., if \fCfirst != \fBbegin()\fP\fP and \fClast != \fBend()\fP\fP); example: \fC'iterators out of range'\fP
.RE
.PP
The complexity depends on the type:
.IP "\(bu" 2
objects: \fClog(size()) + std::distance(first, last)\fP
.IP "\(bu" 2
arrays: linear in the distance between \fIfirst\fP and \fIlast\fP, plus linear in the distance between \fIlast\fP and end of the container
.IP "\(bu" 2
strings: linear in the length of the string
.IP "\(bu" 2
other types: constant
.PP
.PP
{The example shows the result of \fC\fBerase()\fP\fP for different JSON types\&.,erase__IteratorType_IteratorType}
.PP
\fBSee also:\fP
.RS 4
\fBerase(IteratorType)\fP -- removes the element \fBat\fP a given position 
.PP
\fBerase(const typename object_t::key_type&)\fP -- removes the element from an \fBobject\fP \fBat\fP the given key 
.PP
\fBerase(const size_type)\fP -- removes the element from an \fBarray\fP \fBat\fP the given index
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBsize_type\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::erase (const typename object_t::key_type & key)\fC [inline]\fP"

.PP
remove element from a JSON object given a key Removes elements from a JSON object with the key value \fIkey\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP value of the elements to remove
.RE
.PP
\fBReturns:\fP
.RS 4
Number of elements removed\&. If \fIObjectType\fP is the default \fCstd::map\fP type, the return value will always be \fC0\fP (\fIkey\fP was not found) or \fC1\fP (\fIkey\fP was found)\&.
.RE
.PP
\fBPostcondition:\fP
.RS 4
References and iterators to the erased elements are invalidated\&. Other references and iterators are not affected\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when called on a type other than JSON object; example: \fC'cannot use erase() with null'\fP
.RE
.PP
\fClog(size()) + count(key)\fP
.PP
{The example shows the effect of \fC\fBerase()\fP\fP\&.,erase__key_type}
.PP
\fBSee also:\fP
.RS 4
\fBerase(IteratorType)\fP -- removes the element \fBat\fP a given position 
.PP
\fBerase(IteratorType, IteratorType)\fP -- removes the elements in the given range 
.PP
\fBerase(const size_type)\fP -- removes the element from an \fBarray\fP \fBat\fP the given index
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::erase (const \fBsize_type\fP idx)\fC [inline]\fP"

.PP
remove element from a JSON array given an index Removes element from a JSON array at the index \fIidx\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIidx\fP index of the element to remove
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when called on a type other than JSON array; example: \fC'cannot use erase() with null'\fP 
.br
\fIstd::out_of_range\fP when \fCidx >= \fBsize()\fP\fP; example: \fC'array index 17
is out of range'\fP
.RE
.PP
Linear in distance between \fIidx\fP and the end of the container\&.
.PP
{The example shows the effect of \fC\fBerase()\fP\fP\&.,erase__size_type}
.PP
\fBSee also:\fP
.RS 4
\fBerase(IteratorType)\fP -- removes the element \fBat\fP a given position 
.PP
\fBerase(IteratorType, IteratorType)\fP -- removes the elements in the given range 
.PP
\fBerase(const typename object_t::key_type&)\fP -- removes the element from an \fBobject\fP \fBat\fP the given key
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBstring_t\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::escape_string (const \fBstring_t\fP & s)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.PP
escape a string Escape a string by replacing certain special characters by a sequence of an escape character (backslash) and another character and other control characters by a sequence of '\\u' followed by a four-digit hex representation\&.
.PP
\fBParameters:\fP
.RS 4
\fIs\fP the string to escape 
.RE
.PP
\fBReturns:\fP
.RS 4
the escaped string
.RE
.PP
Linear in the length of string \fIs\fP\&. 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static std::size_t \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::extra_space (const \fBstring_t\fP & s)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
calculates the extra space to escape a JSON string 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP the string to escape 
.RE
.PP
\fBReturns:\fP
.RS 4
the number of characters required to escape string \fIs\fP 
.RE
.PP
Linear in the length of string \fIs\fP\&. 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBiterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::find (typename object_t::key_type key)\fC [inline]\fP"

.PP
find an element in a JSON object Finds an element in a JSON object with key equivalent to \fIkey\fP\&. If the element is not found or the JSON value is not an object, \fBend()\fP is returned\&.
.PP
\fBNote:\fP
.RS 4
This method always returns \fBend()\fP when executed on a JSON type that is not an object\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key value of the element to search for
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator to an element with key equivalent to \fIkey\fP\&. If no such element is found or the JSON value is not an object, past-the-end (see \fBend()\fP) iterator is returned\&.
.RE
.PP
Logarithmic in the size of the JSON object\&.
.PP
{The example shows how \fC\fBfind()\fP\fP is used\&.,find__key_type}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_iterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::find (typename object_t::key_type key) const\fC [inline]\fP"

.PP
find an element in a JSON object find an element in a JSON object Finds an element in a JSON object with key equivalent to \fIkey\fP\&. If the element is not found or the JSON value is not an object, \fBend()\fP is returned\&.
.PP
\fBNote:\fP
.RS 4
This method always returns \fBend()\fP when executed on a JSON type that is not an object\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key value of the element to search for
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator to an element with key equivalent to \fIkey\fP\&. If no such element is found or the JSON value is not an object, past-the-end (see \fBend()\fP) iterator is returned\&.
.RE
.PP
Logarithmic in the size of the JSON object\&.
.PP
{The example shows how \fC\fBfind()\fP\fP is used\&.,find__key_type}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::flatten () const\fC [inline]\fP"

.PP
return flattened JSON value The function creates a JSON object whose keys are JSON pointers (see \fCRFC 6901\fP) and whose values are all primitive\&. The original JSON value can be restored using the \fBunflatten()\fP function\&.
.PP
\fBReturns:\fP
.RS 4
an object that maps JSON pointers to primitive values
.RE
.PP
\fBNote:\fP
.RS 4
Empty objects and arrays are flattened to \fCnull\fP and will not be reconstructed correctly by the \fBunflatten()\fP function\&.
.RE
.PP
Linear in the size the JSON value\&.
.PP
{The following code shows how a JSON object is flattened to an object whose keys consist of JSON pointers\&.,flatten}
.PP
\fBSee also:\fP
.RS 4
\fBunflatten()\fP for the reverse function
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::from_cbor (const std::vector< uint8_t > & v, const size_t start_index = \fC0\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
create a JSON value from a byte vector in CBOR format Deserializes a given byte vector \fIv\fP to a JSON value using the CBOR (Concise Binary Object Representation) serialization format\&.
.PP
\fBParameters:\fP
.RS 4
\fIv\fP a byte vector in CBOR format 
.br
\fIstart_index\fP the index to start reading from \fIv\fP (0 by default) 
.RE
.PP
\fBReturns:\fP
.RS 4
deserialized JSON value
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::invalid_argument\fP if unsupported features from CBOR were used in the given vector \fIv\fP or if the input is not valid MessagePack 
.br
\fIstd::out_of_range\fP if the given vector ends prematurely
.RE
.PP
Linear in the size of the byte vector \fIv\fP\&.
.PP
{The example shows the deserialization of a byte vector in CBOR format to a JSON value\&.,from_cbor}
.PP
\fBSee also:\fP
.RS 4
http://cbor.io 
.PP
\fBto_cbor(const basic_json&)\fP for the analogous serialization 
.PP
\fBfrom_msgpack(const std::vector<uint8_t>&, const size_t)\fP for the related MessagePack format
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.9, parameter \fIstart_index\fP since 2\&.1\&.1 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::from_cbor_internal (const std::vector< uint8_t > & v, size_t & idx)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.PP
create a JSON value from a given CBOR vector 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP CBOR serialization 
.br
\fIidx\fP byte index to start reading from \fIv\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
deserialized JSON value
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::invalid_argument\fP if unsupported features from CBOR were used in the given vector \fIv\fP or if the input is not valid CBOR 
.br
\fIstd::out_of_range\fP if the given vector ends prematurely
.RE
.PP
\fBSee also:\fP
.RS 4
https://tools.ietf.org/html/rfc7049 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::from_msgpack (const std::vector< uint8_t > & v, const size_t start_index = \fC0\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
create a JSON value from a byte vector in MessagePack format Deserializes a given byte vector \fIv\fP to a JSON value using the MessagePack serialization format\&.
.PP
\fBParameters:\fP
.RS 4
\fIv\fP a byte vector in MessagePack format 
.br
\fIstart_index\fP the index to start reading from \fIv\fP (0 by default) 
.RE
.PP
\fBReturns:\fP
.RS 4
deserialized JSON value
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::invalid_argument\fP if unsupported features from MessagePack were used in the given vector \fIv\fP or if the input is not valid MessagePack 
.br
\fIstd::out_of_range\fP if the given vector ends prematurely
.RE
.PP
Linear in the size of the byte vector \fIv\fP\&.
.PP
{The example shows the deserialization of a byte vector in MessagePack format to a JSON value\&.,from_msgpack}
.PP
\fBSee also:\fP
.RS 4
http://msgpack.org 
.PP
\fBto_msgpack(const basic_json&)\fP for the analogous serialization 
.PP
\fBfrom_cbor(const std::vector<uint8_t>&, const size_t)\fP for the related CBOR format
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.9, parameter \fIstart_index\fP since 2\&.1\&.1 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::from_msgpack_internal (const std::vector< uint8_t > & v, size_t & idx)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.PP
create a JSON value from a given MessagePack vector 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP MessagePack serialization 
.br
\fIidx\fP byte index to start reading from \fIv\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
deserialized JSON value
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::invalid_argument\fP if unsupported features from MessagePack were used in the given vector \fIv\fP or if the input is not valid MessagePack 
.br
\fIstd::out_of_range\fP if the given vector ends prematurely
.RE
.PP
\fBSee also:\fP
.RS 4
https://github.com/msgpack/msgpack/blob/master/spec.md 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::front ()\fC [inline]\fP"

.PP
access the first element Returns a reference to the first element in the container\&. For a JSON container \fCc\fP, the expression \fCc\&.front()\fP is equivalent to \fC*c\&.\fBbegin()\fP\fP\&.
.PP
\fBReturns:\fP
.RS 4
In case of a structured type (array or object), a reference to the first element is returned\&. In case of number, string, or boolean values, a reference to the value is returned\&.
.RE
.PP
Constant\&.
.PP
\fBPrecondition:\fP
.RS 4
The JSON value must not be \fCnull\fP (would throw \fCstd::out_of_range\fP) or an empty array or object (undefined behavior, \fBguarded by assertions\fP)\&. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
The JSON value remains unchanged\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP when called on \fCnull\fP value
.RE
.PP
{The following code shows an example for \fC\fBfront()\fP\fP\&.,front}
.PP
\fBSee also:\fP
.RS 4
\fBback()\fP -- access the last element
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_reference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::front () const\fC [inline]\fP"

.PP
access the first element Returns a reference to the first element in the container\&. For a JSON container \fCc\fP, the expression \fCc\&.front()\fP is equivalent to \fC*c\&.\fBbegin()\fP\fP\&.
.PP
\fBReturns:\fP
.RS 4
In case of a structured type (array or object), a reference to the first element is returned\&. In case of number, string, or boolean values, a reference to the value is returned\&.
.RE
.PP
Constant\&.
.PP
\fBPrecondition:\fP
.RS 4
The JSON value must not be \fCnull\fP (would throw \fCstd::out_of_range\fP) or an empty array or object (undefined behavior, \fBguarded by assertions\fP)\&. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
The JSON value remains unchanged\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP when called on \fCnull\fP value
.RE
.PP
{The following code shows an example for \fC\fBfront()\fP\fP\&.,front}
.PP
\fBSee also:\fP
.RS 4
\fBback()\fP -- access the last element
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename BasicJsonType , detail::enable_if_t< std::is_same< typename std::remove_const< BasicJsonType >::type, basic_json_t >::value, int >  = 0> \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get () const\fC [inline]\fP"

.PP
get special-case overload This overloads avoids a lot of template boilerplate, it can be seen as the identity method
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIBasicJsonType\fP == \fBbasic_json\fP
.RE
.PP
\fBReturns:\fP
.RS 4
a copy of *this
.RE
.PP
Constant\&.
.PP
\fBSince:\fP
.RS 4
version 2\&.1\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename ValueTypeCV , typename ValueType  = detail::uncvref_t<ValueTypeCV>, detail::enable_if_t< not std::is_same< basic_json_t, ValueType >::value and detail::has_from_json< basic_json_t, ValueType >::value and not detail::has_non_default_from_json< basic_json_t, ValueType >::value, int >  = 0> ValueType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
get a value (explicit) Explicit type conversion between the JSON value and a compatible value which is \fCCopyConstructible\fP and \fCDefaultConstructible\fP\&. The value is converted by calling the \fBjson_serializer<ValueType>\fP \fC\fBfrom_json()\fP\fP method\&.
.PP
The function is equivalent to executing 
.PP
.nf
ValueType ret;
JSONSerializer<ValueType>::from_json(*this, ret);
return ret;

.fi
.PP
.PP
This overloads is chosen if:
.IP "\(bu" 2
\fIValueType\fP is not \fBbasic_json\fP,
.IP "\(bu" 2
\fBjson_serializer<ValueType>\fP has a \fC\fBfrom_json()\fP\fP method of the form \fCvoid from_json(const @ref \fBbasic_json\fP&, ValueType&)\fP, and
.IP "\(bu" 2
\fBjson_serializer<ValueType>\fP does not have a \fC\fBfrom_json()\fP\fP method of the form \fCValueType from_json(const @ref \fBbasic_json\fP&)\fP
.PP
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIValueTypeCV\fP the provided value type 
.br
\fIValueType\fP the returned value type
.RE
.PP
\fBReturns:\fP
.RS 4
copy of the JSON value, converted to \fIValueType\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIwhat\fP \fBjson_serializer<ValueType>\fP \fC\fBfrom_json()\fP\fP method throws
.RE
.PP
{The example below shows several conversions from JSON values to other types\&. There a few things to note: (1) Floating-point numbers can be converted to integers\\, (2) A JSON array can be converted to a standard \fCstd::vector<short>\fP\\, (3) A JSON object can be converted to C++ associative containers such as \fCstd::unordered_map<std::string\\, json>\fP\&.,get__ValueType_const}
.PP
\fBSince:\fP
.RS 4
version 2\&.1\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename ValueTypeCV , typename ValueType  = detail::uncvref_t<ValueTypeCV>, detail::enable_if_t< not std::is_same< basic_json_t, ValueType >::value and detail::has_non_default_from_json< basic_json_t, ValueType >::value, int >  = 0> ValueType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
get a value (explicit); special case Explicit type conversion between the JSON value and a compatible value which is \fBnot\fP \fCCopyConstructible\fP and \fBnot\fP \fCDefaultConstructible\fP\&. The value is converted by calling the \fBjson_serializer<ValueType>\fP \fC\fBfrom_json()\fP\fP method\&.
.PP
The function is equivalent to executing 
.PP
.nf
return JSONSerializer<ValueTypeCV>::from_json(*this);

.fi
.PP
.PP
This overloads is chosen if:
.IP "\(bu" 2
\fIValueType\fP is not \fBbasic_json\fP and
.IP "\(bu" 2
\fBjson_serializer<ValueType>\fP has a \fC\fBfrom_json()\fP\fP method of the form \fCValueType from_json(const @ref \fBbasic_json\fP&)\fP
.PP
.PP
\fBNote:\fP
.RS 4
If \fBjson_serializer<ValueType>\fP has both overloads of \fC\fBfrom_json()\fP\fP, this one is chosen\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIValueTypeCV\fP the provided value type 
.br
\fIValueType\fP the returned value type
.RE
.PP
\fBReturns:\fP
.RS 4
copy of the JSON value, converted to \fIValueType\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIwhat\fP \fBjson_serializer<ValueType>\fP \fC\fBfrom_json()\fP\fP method throws
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.1\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value, int >::type  = 0> PointerType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
get a pointer value (explicit) Explicit pointer access to the internally stored JSON value\&. No copies are made\&.
.PP
\fBWarning:\fP
.RS 4
The pointer becomes invalid if the underlying JSON object changes\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIPointerType\fP pointer type; must be a pointer to \fBarray_t\fP, \fBobject_t\fP, \fBstring_t\fP, \fBboolean_t\fP, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP, or \fBnumber_float_t\fP\&.
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the internally stored JSON value if the requested pointer type \fIPointerType\fP fits to the JSON value; \fCnullptr\fP otherwise
.RE
.PP
Constant\&.
.PP
{The example below shows how pointers to internal values of a JSON value can be requested\&. Note that no type conversions are made and a \fCnullptr\fP is returned if the value and the requested pointer type does not match\&.,get__PointerType}
.PP
\fBSee also:\fP
.RS 4
\fBget_ptr()\fP for explicit pointer-member access
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value, int >::type  = 0> constexpr const PointerType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
get a pointer value (explicit) get a pointer value (explicit) Explicit pointer access to the internally stored JSON value\&. No copies are made\&.
.PP
\fBWarning:\fP
.RS 4
The pointer becomes invalid if the underlying JSON object changes\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIPointerType\fP pointer type; must be a pointer to \fBarray_t\fP, \fBobject_t\fP, \fBstring_t\fP, \fBboolean_t\fP, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP, or \fBnumber_float_t\fP\&.
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the internally stored JSON value if the requested pointer type \fIPointerType\fP fits to the JSON value; \fCnullptr\fP otherwise
.RE
.PP
Constant\&.
.PP
{The example below shows how pointers to internal values of a JSON value can be requested\&. Note that no type conversions are made and a \fCnullptr\fP is returned if the value and the requested pointer type does not match\&.,get__PointerType}
.PP
\fBSee also:\fP
.RS 4
\fBget_ptr()\fP for explicit pointer-member access
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBallocator_type\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_allocator ()\fC [inline]\fP, \fC [static]\fP"

.PP
returns the allocator associated with the container 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename T > static T \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_from_vector (const std::vector< uint8_t > & vec, const size_t current_index)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.PP
take sufficient bytes from a vector to fill an integer variable In the context of binary serialization formats, we need to read several bytes from a byte vector and combine them to multi-byte integral data types\&.
.PP
\fBParameters:\fP
.RS 4
\fIvec\fP byte vector to read from 
.br
\fIcurrent_index\fP the position in the vector after which to read
.RE
.PP
\fBReturns:\fP
.RS 4
the next sizeof(T) bytes from \fIvec\fP, in reverse order as T
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP the integral return type
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP if there are less than sizeof(T)+1 bytes in the vector \fIvec\fP to read
.RE
.PP
In the for loop, the bytes from the vector are copied in reverse order into the return value\&. In the figures below, let sizeof(T)=4 and \fCi\fP be the loop variable\&.
.PP
Precondition:
.PP
vec: | | | a | b | c | d | T: | | | | | ^ ^ ^ ^ current_index i ptr sizeof(T)
.PP
Postcondition:
.PP
vec: | | | a | b | c | d | T: | d | c | b | a | ^ ^ ^ | i ptr current_index
.PP
\fBSee also:\fP
.RS 4
Code adapted from http://stackoverflow.com/a/41031865/266378\&. 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBboolean_t\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl (\fBboolean_t\fP *) const\fC [inline]\fP, \fC [private]\fP"

.PP
get a boolean (explicit) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBobject_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (\fBobject_t\fP *)\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (object) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr const \fBobject_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (const \fBobject_t\fP *) const\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (object) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBarray_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (\fBarray_t\fP *)\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (array) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr const \fBarray_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (const \fBarray_t\fP *) const\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (array) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBstring_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (\fBstring_t\fP *)\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (string) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr const \fBstring_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (const \fBstring_t\fP *) const\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (string) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBboolean_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (\fBboolean_t\fP *)\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (boolean) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr const \fBboolean_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (const \fBboolean_t\fP *) const\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (boolean) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnumber_integer_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (\fBnumber_integer_t\fP *)\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (integer number) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr const \fBnumber_integer_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (const \fBnumber_integer_t\fP *) const\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (integer number) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnumber_unsigned_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (\fBnumber_unsigned_t\fP *)\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (unsigned number) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr const \fBnumber_unsigned_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (const \fBnumber_unsigned_t\fP *) const\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (unsigned number) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnumber_float_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (\fBnumber_float_t\fP *)\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (floating-point number) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr const \fBnumber_float_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_impl_ptr (const \fBnumber_float_t\fP *) const\fC [inline]\fP, \fC [private]\fP, \fC [noexcept]\fP"

.PP
get a pointer to the value (floating-point number) 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value, int >::type  = 0> PointerType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_ptr ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
get a pointer value (implicit) Implicit pointer access to the internally stored JSON value\&. No copies are made\&.
.PP
\fBWarning:\fP
.RS 4
Writing data to the pointee of the result yields an undefined state\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIPointerType\fP pointer type; must be a pointer to \fBarray_t\fP, \fBobject_t\fP, \fBstring_t\fP, \fBboolean_t\fP, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP, or \fBnumber_float_t\fP\&. Enforced by a static assertion\&.
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the internally stored JSON value if the requested pointer type \fIPointerType\fP fits to the JSON value; \fCnullptr\fP otherwise
.RE
.PP
Constant\&.
.PP
{The example below shows how pointers to internal values of a JSON value can be requested\&. Note that no type conversions are made and a \fCnullptr\fP is returned if the value and the requested pointer type does not match\&.,get_ptr}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value and std::is_const< typename std::remove_pointer< PointerType >::type >::value, int >::type  = 0> constexpr const PointerType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_ptr () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
get a pointer value (implicit) get a pointer value (implicit) Implicit pointer access to the internally stored JSON value\&. No copies are made\&.
.PP
\fBWarning:\fP
.RS 4
Writing data to the pointee of the result yields an undefined state\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIPointerType\fP pointer type; must be a pointer to \fBarray_t\fP, \fBobject_t\fP, \fBstring_t\fP, \fBboolean_t\fP, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP, or \fBnumber_float_t\fP\&. Enforced by a static assertion\&.
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the internally stored JSON value if the requested pointer type \fIPointerType\fP fits to the JSON value; \fCnullptr\fP otherwise
.RE
.PP
Constant\&.
.PP
{The example below shows how pointers to internal values of a JSON value can be requested\&. Note that no type conversions are made and a \fCnullptr\fP is returned if the value and the requested pointer type does not match\&.,get_ptr}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename ReferenceType , typename std::enable_if< std::is_reference< ReferenceType >::value, int >::type  = 0> ReferenceType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_ref ()\fC [inline]\fP"

.PP
get a reference value (implicit) Implicit reference access to the internally stored JSON value\&. No copies are made\&.
.PP
\fBWarning:\fP
.RS 4
Writing data to the referee of the result yields an undefined state\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIReferenceType\fP reference type; must be a reference to \fBarray_t\fP, \fBobject_t\fP, \fBstring_t\fP, \fBboolean_t\fP, \fBnumber_integer_t\fP, or \fBnumber_float_t\fP\&. Enforced by static assertion\&.
.RE
.PP
\fBReturns:\fP
.RS 4
reference to the internally stored JSON value if the requested reference type \fIReferenceType\fP fits to the JSON value; throws std::domain_error otherwise
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP in case passed type \fIReferenceType\fP is incompatible with the stored JSON value
.RE
.PP
Constant\&.
.PP
{The example shows several calls to \fC\fBget_ref()\fP\fP\&.,get_ref}
.PP
\fBSince:\fP
.RS 4
version 1\&.1\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename ReferenceType , typename std::enable_if< std::is_reference< ReferenceType >::value and std::is_const< typename std::remove_reference< ReferenceType >::type >::value, int >::type  = 0> ReferenceType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_ref () const\fC [inline]\fP"

.PP
get a reference value (implicit) get a reference value (implicit) Implicit reference access to the internally stored JSON value\&. No copies are made\&.
.PP
\fBWarning:\fP
.RS 4
Writing data to the referee of the result yields an undefined state\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIReferenceType\fP reference type; must be a reference to \fBarray_t\fP, \fBobject_t\fP, \fBstring_t\fP, \fBboolean_t\fP, \fBnumber_integer_t\fP, or \fBnumber_float_t\fP\&. Enforced by static assertion\&.
.RE
.PP
\fBReturns:\fP
.RS 4
reference to the internally stored JSON value if the requested reference type \fIReferenceType\fP fits to the JSON value; throws std::domain_error otherwise
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP in case passed type \fIReferenceType\fP is incompatible with the stored JSON value
.RE
.PP
Constant\&.
.PP
{The example shows several calls to \fC\fBget_ref()\fP\fP\&.,get_ref}
.PP
\fBSince:\fP
.RS 4
version 1\&.1\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename ReferenceType , typename ThisType > static ReferenceType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::get_ref_impl (ThisType & obj)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.PP
helper function to implement \fBget_ref()\fP This funcion helps to implement \fBget_ref()\fP without code duplication for const and non-const overloads
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIThisType\fP will be deduced as \fC\fBbasic_json\fP\fP or \fCconst \fBbasic_json\fP\fP
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if ReferenceType does not match underlying value type of the current JSON 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBiterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::insert (\fBconst_iterator\fP pos, const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & val)\fC [inline]\fP"

.PP
inserts element Inserts element \fIval\fP before iterator \fIpos\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP iterator before which the content will be inserted; may be the \fBend()\fP iterator 
.br
\fIval\fP element to insert 
.RE
.PP
\fBReturns:\fP
.RS 4
iterator pointing to the inserted \fIval\fP\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if called on JSON values other than arrays; example: \fC'cannot use insert() with string'\fP 
.br
\fIstd::domain_error\fP if \fIpos\fP is not an iterator of *this; example: \fC'iterator does not fit current value'\fP
.RE
.PP
Constant plus linear in the distance between \fIpos\fP and end of the container\&.
.PP
{The example shows how \fC\fBinsert()\fP\fP is used\&.,insert}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBiterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::insert (\fBconst_iterator\fP pos, \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > && val)\fC [inline]\fP"

.PP
inserts element inserts element Inserts element \fIval\fP before iterator \fIpos\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP iterator before which the content will be inserted; may be the \fBend()\fP iterator 
.br
\fIval\fP element to insert 
.RE
.PP
\fBReturns:\fP
.RS 4
iterator pointing to the inserted \fIval\fP\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if called on JSON values other than arrays; example: \fC'cannot use insert() with string'\fP 
.br
\fIstd::domain_error\fP if \fIpos\fP is not an iterator of *this; example: \fC'iterator does not fit current value'\fP
.RE
.PP
Constant plus linear in the distance between \fIpos\fP and end of the container\&.
.PP
{The example shows how \fC\fBinsert()\fP\fP is used\&.,insert}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBiterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::insert (\fBconst_iterator\fP pos, \fBsize_type\fP cnt, const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & val)\fC [inline]\fP"

.PP
inserts elements Inserts \fIcnt\fP copies of \fIval\fP before iterator \fIpos\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP iterator before which the content will be inserted; may be the \fBend()\fP iterator 
.br
\fIcnt\fP number of copies of \fIval\fP to insert 
.br
\fIval\fP element to insert 
.RE
.PP
\fBReturns:\fP
.RS 4
iterator pointing to the first element inserted, or \fIpos\fP if \fCcnt==0\fP
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if called on JSON values other than arrays; example: \fC'cannot use insert() with string'\fP 
.br
\fIstd::domain_error\fP if \fIpos\fP is not an iterator of *this; example: \fC'iterator does not fit current value'\fP
.RE
.PP
Linear in \fIcnt\fP plus linear in the distance between \fIpos\fP and end of the container\&.
.PP
{The example shows how \fC\fBinsert()\fP\fP is used\&.,insert__count}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBiterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::insert (\fBconst_iterator\fP pos, \fBconst_iterator\fP first, \fBconst_iterator\fP last)\fC [inline]\fP"

.PP
inserts elements Inserts elements from range \fC[first, last)\fP before iterator \fIpos\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP iterator before which the content will be inserted; may be the \fBend()\fP iterator 
.br
\fIfirst\fP begin of the range of elements to insert 
.br
\fIlast\fP end of the range of elements to insert
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if called on JSON values other than arrays; example: \fC'cannot use insert() with string'\fP 
.br
\fIstd::domain_error\fP if \fIpos\fP is not an iterator of *this; example: \fC'iterator does not fit current value'\fP 
.br
\fIstd::domain_error\fP if \fIfirst\fP and \fIlast\fP do not belong to the same JSON value; example: \fC'iterators do not fit'\fP 
.br
\fIstd::domain_error\fP if \fIfirst\fP or \fIlast\fP are iterators into container for which insert is called; example: \fC'passed iterators may not
belong to container'\fP
.RE
.PP
\fBReturns:\fP
.RS 4
iterator pointing to the first element inserted, or \fIpos\fP if \fCfirst==last\fP
.RE
.PP
Linear in \fCstd::distance(first, last)\fP plus linear in the distance between \fIpos\fP and end of the container\&.
.PP
{The example shows how \fC\fBinsert()\fP\fP is used\&.,insert__range}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBiterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::insert (\fBconst_iterator\fP pos, std::initializer_list< \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > > ilist)\fC [inline]\fP"

.PP
inserts elements Inserts elements from initializer list \fIilist\fP before iterator \fIpos\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP iterator before which the content will be inserted; may be the \fBend()\fP iterator 
.br
\fIilist\fP initializer list to insert the values from
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if called on JSON values other than arrays; example: \fC'cannot use insert() with string'\fP 
.br
\fIstd::domain_error\fP if \fIpos\fP is not an iterator of *this; example: \fC'iterator does not fit current value'\fP
.RE
.PP
\fBReturns:\fP
.RS 4
iterator pointing to the first element inserted, or \fIpos\fP if \fCilist\fP is empty
.RE
.PP
Linear in \fCilist\&.size()\fP plus linear in the distance between \fIpos\fP and end of the container\&.
.PP
{The example shows how \fC\fBinsert()\fP\fP is used\&.,insert__ilist}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::is_array () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return whether value is an array This function returns true iff the JSON value is an array\&.
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if type is array, \fCfalse\fP otherwise\&.
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBis_array()\fP\fP for all JSON types\&.,is_array}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::is_boolean () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return whether value is a boolean This function returns true iff the JSON value is a boolean\&.
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if type is boolean, \fCfalse\fP otherwise\&.
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBis_boolean()\fP\fP for all JSON types\&.,is_boolean}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::is_discarded () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return whether value is discarded This function returns true iff the JSON value was discarded during parsing with a callback function (see \fBparser_callback_t\fP)\&.
.PP
\fBNote:\fP
.RS 4
This function will always be \fCfalse\fP for JSON values after parsing\&. That is, discarded values can only occur during parsing, but will be removed when inside a structured value or replaced by null in other cases\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if type is discarded, \fCfalse\fP otherwise\&.
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBis_discarded()\fP\fP for all JSON types\&.,is_discarded}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::is_null () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return whether value is null This function returns true iff the JSON value is null\&.
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if type is null, \fCfalse\fP otherwise\&.
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBis_null()\fP\fP for all JSON types\&.,is_null}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::is_number () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return whether value is a number This function returns true iff the JSON value is a number\&. This includes both integer and floating-point values\&.
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if type is number (regardless whether integer, unsigned integer or floating-type), \fCfalse\fP otherwise\&.
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBis_number()\fP\fP for all JSON types\&.,is_number}
.PP
\fBSee also:\fP
.RS 4
\fBis_number_integer()\fP -- check if \fBvalue\fP is an integer or unsigned integer number 
.PP
\fBis_number_unsigned()\fP -- check if \fBvalue\fP is an unsigned integer number 
.PP
\fBis_number_float()\fP -- check if \fBvalue\fP is a floating-point number
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::is_number_float () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return whether value is a floating-point number This function returns true iff the JSON value is a floating-point number\&. This excludes integer and unsigned integer values\&.
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if type is a floating-point number, \fCfalse\fP otherwise\&.
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBis_number_float()\fP\fP for all JSON types\&.,is_number_float}
.PP
\fBSee also:\fP
.RS 4
\fBis_number()\fP -- check if \fBvalue\fP is number 
.PP
\fBis_number_integer()\fP -- check if \fBvalue\fP is an integer number 
.PP
\fBis_number_unsigned()\fP -- check if \fBvalue\fP is an unsigned integer number
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::is_number_integer () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return whether value is an integer number This function returns true iff the JSON value is an integer or unsigned integer number\&. This excludes floating-point values\&.
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if type is an integer or unsigned integer number, \fCfalse\fP otherwise\&.
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBis_number_integer()\fP\fP for all JSON types\&.,is_number_integer}
.PP
\fBSee also:\fP
.RS 4
\fBis_number()\fP -- check if \fBvalue\fP is a number 
.PP
\fBis_number_unsigned()\fP -- check if \fBvalue\fP is an unsigned integer number 
.PP
\fBis_number_float()\fP -- check if \fBvalue\fP is a floating-point number
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::is_number_unsigned () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return whether value is an unsigned integer number This function returns true iff the JSON value is an unsigned integer number\&. This excludes floating-point and (signed) integer values\&.
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if type is an unsigned integer number, \fCfalse\fP otherwise\&.
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBis_number_unsigned()\fP\fP for all JSON types\&.,is_number_unsigned}
.PP
\fBSee also:\fP
.RS 4
\fBis_number()\fP -- check if \fBvalue\fP is a number 
.PP
\fBis_number_integer()\fP -- check if \fBvalue\fP is an integer or unsigned integer number 
.PP
\fBis_number_float()\fP -- check if \fBvalue\fP is a floating-point number
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::is_object () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return whether value is an object This function returns true iff the JSON value is an object\&.
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if type is object, \fCfalse\fP otherwise\&.
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBis_object()\fP\fP for all JSON types\&.,is_object}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::is_primitive () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return whether type is primitive This function returns true iff the JSON type is primitive (string, number, boolean, or null)\&.
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if type is primitive (string, number, boolean, or null), \fCfalse\fP otherwise\&.
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBis_primitive()\fP\fP for all JSON types\&.,is_primitive}
.PP
\fBSee also:\fP
.RS 4
\fBis_structured()\fP -- returns whether JSON \fBvalue\fP is structured 
.PP
\fBis_null()\fP -- returns whether JSON \fBvalue\fP is \fCnull\fP 
.PP
\fBis_string()\fP -- returns whether JSON \fBvalue\fP is a string 
.PP
\fBis_boolean()\fP -- returns whether JSON \fBvalue\fP is a boolean 
.PP
\fBis_number()\fP -- returns whether JSON \fBvalue\fP is a number
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::is_string () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return whether value is a string This function returns true iff the JSON value is a string\&.
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if type is string, \fCfalse\fP otherwise\&.
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBis_string()\fP\fP for all JSON types\&.,is_string}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::is_structured () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return whether type is structured This function returns true iff the JSON type is structured (array or object)\&.
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if type is structured (array or object), \fCfalse\fP otherwise\&.
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBis_structured()\fP\fP for all JSON types\&.,is_structured}
.PP
\fBSee also:\fP
.RS 4
\fBis_primitive()\fP -- returns whether \fBvalue\fP is primitive 
.PP
\fBis_array()\fP -- returns whether \fBvalue\fP is an \fBarray\fP 
.PP
\fBis_object()\fP -- returns whether \fBvalue\fP is an \fBobject\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBiteration_proxy\fP<\fBiterator\fP> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::iterator_wrapper (\fBreference\fP cont)\fC [inline]\fP, \fC [static]\fP"

.PP
wrapper to access iterator member functions in range-based for This function allows to access \fBiterator::key()\fP and \fBiterator::value()\fP during range-based for loops\&. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator\&.
.PP
\fBNote:\fP
.RS 4
The name of this function is not yet final and may change in the future\&. 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBiteration_proxy\fP<\fBconst_iterator\fP> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::iterator_wrapper (\fBconst_reference\fP cont)\fC [inline]\fP, \fC [static]\fP"

.PP
wrapper to access iterator member functions in range-based for This function allows to access \fBiterator::key()\fP and \fBiterator::value()\fP during range-based for loops\&. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator\&.
.PP
\fBNote:\fP
.RS 4
The name of this function is not yet final and may change in the future\&. 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBsize_type\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::max_size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns the maximum possible number of elements Returns the maximum number of elements a JSON value is able to hold due to system or library implementation limitations, i\&.e\&. \fCstd::distance(\fBbegin()\fP, \fBend()\fP)\fP for the JSON value\&.
.PP
\fBReturns:\fP
.RS 4
The return value depends on the different types and is defined as follows: Value type return value  null \fC0\fP (same as \fC\fBsize()\fP\fP) boolean \fC1\fP (same as \fC\fBsize()\fP\fP) string \fC1\fP (same as \fC\fBsize()\fP\fP) number \fC1\fP (same as \fC\fBsize()\fP\fP) object result of function \fCobject_t::max_size()\fP array result of function \fCarray_t::max_size()\fP Constant, as long as \fBarray_t\fP and \fBobject_t\fP satisfy the Container concept; that is, their \fC\fBmax_size()\fP\fP functions have constant complexity\&.
.RE
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of returning \fCb\&.size()\fP where \fCb\fP is the largest possible JSON value\&.
.PP
.PP
{The following code calls \fC\fBmax_size()\fP\fP on the different value types\&. Note the output is implementation specific\&.,max_size}
.PP
\fBSee also:\fP
.RS 4
\fBsize()\fP -- returns the number of elements
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::meta ()\fC [inline]\fP, \fC [static]\fP"

.PP
returns version information on the library This function returns a JSON object with information about the library, including the version number and information on the platform and compiler\&.
.PP
\fBReturns:\fP
.RS 4
JSON object holding version information key description  \fCcompiler\fP Information on the used compiler\&. It is an object with the following keys: \fCc++\fP (the used C++ standard), \fCfamily\fP (the compiler family; possible values are \fCclang\fP, \fCicc\fP, \fCgcc\fP, \fCilecpp\fP, \fCmsvc\fP, \fCpgcpp\fP, \fCsunpro\fP, and \fCunknown\fP), and \fCversion\fP (the compiler version)\&. \fCcopyright\fP The copyright line for the library as string\&. \fCname\fP The name of the library as string\&. \fCplatform\fP The used platform as string\&. Possible values are \fCwin32\fP, \fClinux\fP, \fCapple\fP, \fCunix\fP, and \fCunknown\fP\&. \fCurl\fP The URL of the project as string\&. \fCversion\fP The version of the library\&. It is an object with the following keys: \fCmajor\fP, \fCminor\fP, and \fCpatch\fP as defined by \fCSemantic Versioning\fP, and \fCstring\fP (the version string)\&. {The following code shows an example output of the \fC\fBmeta()\fP\fP function\&.,meta}
.RE
.PP
Constant\&.
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::object (std::initializer_list< \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > > init = \fCstd::initializer_list<\fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >>()\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
explicitly create an object from an initializer list Creates a JSON object value from a given initializer list\&. The initializer lists elements must be pairs, and their first elements must be strings\&. If the initializer list is empty, the empty object \fC{}\fP is created\&.
.PP
\fBNote:\fP
.RS 4
This function is only added for symmetry reasons\&. In contrast to the related function \fBarray(std::initializer_list<basic_json>)\fP, there are no cases which can only be expressed by this function\&. That is, any initializer list \fIinit\fP can also be passed to the initializer list constructor \fBbasic_json\fP(std::initializer_list<basic_json>, bool, value_t)\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIinit\fP initializer list to create an object from (optional)
.RE
.PP
\fBReturns:\fP
.RS 4
JSON object value
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if \fIinit\fP is not a pair whose first elements are strings; thrown by \fBbasic_json(std::initializer_list<basic_json>, bool, value_t)\fP
.RE
.PP
Linear in the size of \fIinit\fP\&.
.PP
{The following code shows an example for the \fCobject\fP function\&.,object}
.PP
\fBSee also:\fP
.RS 4
\fBbasic_json(std::initializer_list<basic_json>, bool, value_t)\fP -- \fBcreate\fP a JSON \fBvalue\fP from an initializer list 
.PP
\fBarray(std::initializer_list<basic_json>)\fP -- \fBcreate\fP a JSON \fBarray\fP \fBvalue\fP from an initializer list
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator \fBvalue_t\fP () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return the type of the JSON value (implicit) Implicitly return the type of the JSON value as a value from the \fBvalue_t\fP enumeration\&.
.PP
\fBReturns:\fP
.RS 4
the type of the JSON value
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies the \fBvalue_t\fP operator for all JSON types\&.,operator__value_t}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename ValueType , typename std::enable_if< not std::is_pointer< ValueType >::value and not std::is_same< ValueType, typename string_t::value_type >::value and not std::is_same< ValueType, std::initializer_list< typename string_t::value_type >>::value, int >::type  = 0> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator ValueType () const\fC [inline]\fP"

.PP
get a value (implicit) Implicit type conversion between the JSON value and a compatible value\&. The call is realized by calling \fBget() const\fP\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIValueType\fP non-pointer type compatible to the JSON value, for instance \fCint\fP for JSON integer numbers, \fCbool\fP for JSON booleans, or \fCstd::vector\fP types for JSON arrays\&. The character type of \fBstring_t\fP as well as an initializer list of this type is excluded to avoid ambiguities as these types implicitly convert to \fCstd::string\fP\&.
.RE
.PP
\fBReturns:\fP
.RS 4
copy of the JSON value, converted to type \fIValueType\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP in case passed type \fIValueType\fP is incompatible to JSON, thrown by \fBget() const\fP
.RE
.PP
Linear in the size of the JSON value\&.
.PP
{The example below shows several conversions from JSON values to other types\&. There a few things to note: (1) Floating-point numbers can be converted to integers\\, (2) A JSON array can be converted to a standard \fCstd::vector<short>\fP\\, (3) A JSON object can be converted to C++ associative containers such as \fCstd::unordered_map<std::string\\, json>\fP\&.,operator__ValueType}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator+= (\fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > && val)\fC [inline]\fP"

.PP
add an object to an array add an object to an array Appends the given element \fIval\fP to the end of the JSON value\&. If the function is called on a JSON null value, an empty array is created before appending \fIval\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIval\fP the value to add to the JSON array
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when called on a type other than JSON array or null; example: \fC'cannot use push_back() with number'\fP
.RE
.PP
Amortized constant\&.
.PP
{The example shows how \fC\fBpush_back()\fP\fP and \fC+=\fP can be used to add elements to a JSON array\&. Note how the \fCnull\fP value was silently converted to a JSON array\&.,push_back}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator+= (const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & val)\fC [inline]\fP"

.PP
add an object to an array add an object to an array Appends the given element \fIval\fP to the end of the JSON value\&. If the function is called on a JSON null value, an empty array is created before appending \fIval\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIval\fP the value to add to the JSON array
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when called on a type other than JSON array or null; example: \fC'cannot use push_back() with number'\fP
.RE
.PP
Amortized constant\&.
.PP
{The example shows how \fC\fBpush_back()\fP\fP and \fC+=\fP can be used to add elements to a JSON array\&. Note how the \fCnull\fP value was silently converted to a JSON array\&.,push_back}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator+= (const typename object_t::value_type & val)\fC [inline]\fP"

.PP
add an object to an object add an object to an object Inserts the given element \fIval\fP to the JSON object\&. If the function is called on a JSON null value, an empty object is created before inserting \fIval\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIval\fP the value to add to the JSON object
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when called on a type other than JSON object or null; example: \fC'cannot use push_back() with number'\fP
.RE
.PP
Logarithmic in the size of the container, O(log(\fC\fBsize()\fP\fP))\&.
.PP
{The example shows how \fC\fBpush_back()\fP\fP and \fC+=\fP can be used to add elements to a JSON object\&. Note how the \fCnull\fP value was silently converted to a JSON object\&.,push_back__object_t__value}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator+= (std::initializer_list< \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > > init)\fC [inline]\fP"

.PP
add an object to an object add an object to an object This function allows to use \fCpush_back\fP with an initializer list\&. In case
.PP
.IP "1." 4
the current value is an object,
.IP "2." 4
the initializer list \fIinit\fP contains only two elements, and
.IP "3." 4
the first element of \fIinit\fP is a string,
.PP
.PP
\fIinit\fP is converted into an object element and added using \fBpush_back(const typename object_t::value_type&)\fP\&. Otherwise, \fIinit\fP is converted to a JSON value and added using \fBpush_back(basic_json&&)\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIinit\fP an initializer list
.RE
.PP
Linear in the size of the initializer list \fIinit\fP\&.
.PP
\fBNote:\fP
.RS 4
This function is required to resolve an ambiguous overload error, because pairs like \fC{'key', 'value'}\fP can be both interpreted as \fCobject_t::value_type\fP or \fCstd::initializer_list<\fBbasic_json\fP>\fP, see https://github.com/nlohmann/json/issues/235 for more information\&.
.RE
.PP
{The example shows how initializer lists are treated as objects when possible\&.,push_back__initializer_list} 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP& \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator= (\fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > other)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
copy assignment Copy assignment operator\&. Copies a JSON value via the 'copy and swap' strategy: It is expressed in terms of the copy constructor, destructor, and the \fBswap()\fP member function\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP value to copy from
.RE
.PP
Linear\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is linear\&.
.PP
.PP
{The code below shows and example for the copy assignment\&. It creates a copy of value \fCa\fP which is then swapped with \fCb\fP\&. Finally\\, the copy of \fCa\fP (which is the null value after the swap) is destroyed\&.,basic_json__copyassignment}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator[] (\fBsize_type\fP idx)\fC [inline]\fP"

.PP
access specified array element Returns a reference to the element at specified location \fIidx\fP\&.
.PP
\fBNote:\fP
.RS 4
If \fIidx\fP is beyond the range of the array (i\&.e\&., \fCidx >= \fBsize()\fP\fP), then the array is silently filled up with \fCnull\fP values to make \fCidx\fP a valid reference to the last stored element\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIidx\fP index of the element to access
.RE
.PP
\fBReturns:\fP
.RS 4
reference to the element at index \fIidx\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if JSON is not an array or null; example: \fC'cannot use operator[] with string'\fP
.RE
.PP
Constant if \fIidx\fP is in the range of the array\&. Otherwise linear in \fCidx - \fBsize()\fP\fP\&.
.PP
{The example below shows how array elements can be read and written using \fC[]\fP operator\&. Note the addition of \fCnull\fP values\&.,operatorarray__size_type}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_reference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator[] (\fBsize_type\fP idx) const\fC [inline]\fP"

.PP
access specified array element Returns a const reference to the element at specified location \fIidx\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIidx\fP index of the element to access
.RE
.PP
\fBReturns:\fP
.RS 4
const reference to the element at index \fIidx\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if JSON is not an array; example: \fC'cannot use
operator[] with null'\fP
.RE
.PP
Constant\&.
.PP
{The example below shows how array elements can be read using the \fC[]\fP operator\&.,operatorarray__size_type_const}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator[] (const typename object_t::key_type & key)\fC [inline]\fP"

.PP
access specified object element Returns a reference to the element at with specified key \fIkey\fP\&.
.PP
\fBNote:\fP
.RS 4
If \fIkey\fP is not found in the object, then it is silently added to the object and filled with a \fCnull\fP value to make \fCkey\fP a valid reference\&. In case the value was \fCnull\fP before, it is converted to an object\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns:\fP
.RS 4
reference to the element at key \fIkey\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if JSON is not an object or null; example: \fC'cannot use operator[] with string'\fP
.RE
.PP
Logarithmic in the size of the container\&.
.PP
{The example below shows how object elements can be read and written using the \fC[]\fP operator\&.,operatorarray__key_type}
.PP
\fBSee also:\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_reference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator[] (const typename object_t::key_type & key) const\fC [inline]\fP"

.PP
read-only access specified object element Returns a const reference to the element at with specified key \fIkey\fP\&. No bounds checking is performed\&.
.PP
\fBWarning:\fP
.RS 4
If the element with key \fIkey\fP does not exist, the behavior is undefined\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns:\fP
.RS 4
const reference to the element at key \fIkey\fP 
.RE
.PP
\fBPrecondition:\fP
.RS 4
The element with key \fIkey\fP must exist\&. \fBThis precondition is enforced with an assertion\&.\fP
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if JSON is not an object; example: \fC'cannot use
operator[] with null'\fP
.RE
.PP
Logarithmic in the size of the container\&.
.PP
{The example below shows how object elements can be read using the \fC[]\fP operator\&.,operatorarray__key_type_const}
.PP
\fBSee also:\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename T , std::size_t n> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator[] (T *(&) key[n])\fC [inline]\fP"

.PP
access specified object element Returns a reference to the element at with specified key \fIkey\fP\&.
.PP
\fBNote:\fP
.RS 4
If \fIkey\fP is not found in the object, then it is silently added to the object and filled with a \fCnull\fP value to make \fCkey\fP a valid reference\&. In case the value was \fCnull\fP before, it is converted to an object\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns:\fP
.RS 4
reference to the element at key \fIkey\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if JSON is not an object or null; example: \fC'cannot use operator[] with string'\fP
.RE
.PP
Logarithmic in the size of the container\&.
.PP
{The example below shows how object elements can be read and written using the \fC[]\fP operator\&.,operatorarray__key_type}
.PP
\fBSee also:\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename T , std::size_t n> \fBconst_reference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator[] (T *(&) key[n]) const\fC [inline]\fP"

.PP
read-only access specified object element Returns a const reference to the element at with specified key \fIkey\fP\&. No bounds checking is performed\&.
.PP
\fBWarning:\fP
.RS 4
If the element with key \fIkey\fP does not exist, the behavior is undefined\&.
.RE
.PP
\fBNote:\fP
.RS 4
This function is required for compatibility reasons with Clang\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns:\fP
.RS 4
const reference to the element at key \fIkey\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if JSON is not an object; example: \fC'cannot use
operator[] with null'\fP
.RE
.PP
Logarithmic in the size of the container\&.
.PP
{The example below shows how object elements can be read using the \fC[]\fP operator\&.,operatorarray__key_type_const}
.PP
\fBSee also:\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename T > \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator[] (T * key)\fC [inline]\fP"

.PP
access specified object element Returns a reference to the element at with specified key \fIkey\fP\&.
.PP
\fBNote:\fP
.RS 4
If \fIkey\fP is not found in the object, then it is silently added to the object and filled with a \fCnull\fP value to make \fCkey\fP a valid reference\&. In case the value was \fCnull\fP before, it is converted to an object\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns:\fP
.RS 4
reference to the element at key \fIkey\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if JSON is not an object or null; example: \fC'cannot use operator[] with string'\fP
.RE
.PP
Logarithmic in the size of the container\&.
.PP
{The example below shows how object elements can be read and written using the \fC[]\fP operator\&.,operatorarray__key_type}
.PP
\fBSee also:\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.1\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename T > \fBconst_reference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator[] (T * key) const\fC [inline]\fP"

.PP
read-only access specified object element Returns a const reference to the element at with specified key \fIkey\fP\&. No bounds checking is performed\&.
.PP
\fBWarning:\fP
.RS 4
If the element with key \fIkey\fP does not exist, the behavior is undefined\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns:\fP
.RS 4
const reference to the element at key \fIkey\fP 
.RE
.PP
\fBPrecondition:\fP
.RS 4
The element with key \fIkey\fP must exist\&. \fBThis precondition is enforced with an assertion\&.\fP
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if JSON is not an object; example: \fC'cannot use
operator[] with null'\fP
.RE
.PP
Logarithmic in the size of the container\&.
.PP
{The example below shows how object elements can be read using the \fC[]\fP operator\&.,operatorarray__key_type_const}
.PP
\fBSee also:\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.1\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator[] (const \fBjson_pointer\fP & ptr)\fC [inline]\fP"

.PP
access specified element via JSON Pointer Uses a JSON pointer to retrieve a reference to the respective JSON value\&. No bound checking is performed\&. Similar to \fBoperator[]\fP(const typename object_t::key_type&), \fCnull\fP values are created in arrays and objects if necessary\&.
.PP
In particular:
.IP "\(bu" 2
If the JSON pointer points to an object key that does not exist, it is created an filled with a \fCnull\fP value before a reference to it is returned\&.
.IP "\(bu" 2
If the JSON pointer points to an array index that does not exist, it is created an filled with a \fCnull\fP value before a reference to it is returned\&. All indices between the current maximum and the given index are also filled with \fCnull\fP\&.
.IP "\(bu" 2
The special value \fC-\fP is treated as a synonym for the index past the end\&.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP a JSON pointer
.RE
.PP
\fBReturns:\fP
.RS 4
reference to the element pointed to by \fIptr\fP 
.RE
.PP
Constant\&.
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP if the JSON pointer can not be resolved 
.br
\fIstd::domain_error\fP if an array index begins with '0' 
.br
\fIstd::invalid_argument\fP if an array index was not a number
.RE
.PP
{The behavior is shown in the example\&.,operatorjson_pointer}
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_reference\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::operator[] (const \fBjson_pointer\fP & ptr) const\fC [inline]\fP"

.PP
access specified element via JSON Pointer Uses a JSON pointer to retrieve a reference to the respective JSON value\&. No bound checking is performed\&. The function does not change the JSON value; no \fCnull\fP values are created\&. In particular, the the special value \fC-\fP yields an exception\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP JSON pointer to the desired element
.RE
.PP
\fBReturns:\fP
.RS 4
const reference to the element pointed to by \fIptr\fP 
.RE
.PP
Constant\&.
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP if the JSON pointer can not be resolved 
.br
\fIstd::domain_error\fP if an array index begins with '0' 
.br
\fIstd::invalid_argument\fP if an array index was not a number
.RE
.PP
{The behavior is shown in the example\&.,operatorjson_pointer_const}
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<class T , std::size_t N> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::parse (T(&) array[N], const \fBparser_callback_t\fP cb = \fCnullptr\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
deserialize from an array This function reads from an array of 1-byte values\&.
.PP
\fBPrecondition:\fP
.RS 4
Each element of the container has a size of 1 byte\&. Violating this precondition yields undefined behavior\&. \fBThis precondition is enforced with a static assertion\&.\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP array to read from 
.br
\fIcb\fP a parser callback function of type \fBparser_callback_t\fP which is used to control the deserialization by filtering unwanted values (optional)
.RE
.PP
\fBReturns:\fP
.RS 4
result of the deserialization
.RE
.PP
Linear in the length of the input\&. The parser is a predictive LL(1) parser\&. The complexity can be higher if the parser callback function \fIcb\fP has a super-linear complexity\&.
.PP
\fBNote:\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&.
.RE
.PP
{The example below demonstrates the \fC\fBparse()\fP\fP function reading from an array\&.,parse__array__parser_callback_t}
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.3 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename CharT , typename std::enable_if< std::is_pointer< CharT >::value and std::is_integral< typename std::remove_pointer< CharT >::type >::value and sizeof(typename std::remove_pointer< CharT >::type)==1, int >::type  = 0> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::parse (const CharT s, const \fBparser_callback_t\fP cb = \fCnullptr\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
deserialize from string literal 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fICharT\fP character/literal type with size of 1 byte 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIs\fP string literal to read a serialized JSON value from 
.br
\fIcb\fP a parser callback function of type \fBparser_callback_t\fP which is used to control the deserialization by filtering unwanted values (optional)
.RE
.PP
\fBReturns:\fP
.RS 4
result of the deserialization
.RE
.PP
Linear in the length of the input\&. The parser is a predictive LL(1) parser\&. The complexity can be higher if the parser callback function \fIcb\fP has a super-linear complexity\&.
.PP
\fBNote:\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&. 
.PP
String containers like \fCstd::string\fP or \fBstring_t\fP can be parsed with \fBparse(const ContiguousContainer&, const parser_callback_t)\fP
.RE
.PP
{The example below demonstrates the \fC\fBparse()\fP\fP function with and without callback function\&.,parse__string__parser_callback_t}
.PP
\fBSee also:\fP
.RS 4
\fBparse(std::istream&, const parser_callback_t)\fP for a version that reads from an input stream
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 (originally for \fBstring_t\fP) 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::parse (std::istream & i, const \fBparser_callback_t\fP cb = \fCnullptr\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
deserialize from stream 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP stream to read a serialized JSON value from 
.br
\fIcb\fP a parser callback function of type \fBparser_callback_t\fP which is used to control the deserialization by filtering unwanted values (optional)
.RE
.PP
\fBReturns:\fP
.RS 4
result of the deserialization
.RE
.PP
Linear in the length of the input\&. The parser is a predictive LL(1) parser\&. The complexity can be higher if the parser callback function \fIcb\fP has a super-linear complexity\&.
.PP
\fBNote:\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&.
.RE
.PP
{The example below demonstrates the \fC\fBparse()\fP\fP function with and without callback function\&.,parse__istream__parser_callback_t}
.PP
\fBSee also:\fP
.RS 4
\fBparse(const CharT, const parser_callback_t)\fP for a version that reads from a string
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::parse (std::istream && i, const \fBparser_callback_t\fP cb = \fCnullptr\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
deserialize from stream 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP stream to read a serialized JSON value from 
.br
\fIcb\fP a parser callback function of type \fBparser_callback_t\fP which is used to control the deserialization by filtering unwanted values (optional)
.RE
.PP
\fBReturns:\fP
.RS 4
result of the deserialization
.RE
.PP
Linear in the length of the input\&. The parser is a predictive LL(1) parser\&. The complexity can be higher if the parser callback function \fIcb\fP has a super-linear complexity\&.
.PP
\fBNote:\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&.
.RE
.PP
{The example below demonstrates the \fC\fBparse()\fP\fP function with and without callback function\&.,parse__istream__parser_callback_t}
.PP
\fBSee also:\fP
.RS 4
\fBparse(const CharT, const parser_callback_t)\fP for a version that reads from a string
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<class IteratorType , typename std::enable_if< std::is_base_of< std::random_access_iterator_tag, typename std::iterator_traits< IteratorType >::iterator_category >::value, int >::type  = 0> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::parse (IteratorType first, IteratorType last, const \fBparser_callback_t\fP cb = \fCnullptr\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
deserialize from an iterator range with contiguous storage This function reads from an iterator range of a container with contiguous storage of 1-byte values\&. Compatible container types include \fCstd::vector\fP, \fCstd::string\fP, \fCstd::array\fP, \fCstd::valarray\fP, and \fCstd::initializer_list\fP\&. Furthermore, C-style arrays can be used with \fCstd::begin()\fP/\fCstd::end()\fP\&. User-defined containers can be used as long as they implement random-access iterators and a contiguous storage\&.
.PP
\fBPrecondition:\fP
.RS 4
The iterator range is contiguous\&. Violating this precondition yields undefined behavior\&. \fBThis precondition is enforced with an assertion\&.\fP 
.PP
Each element in the range has a size of 1 byte\&. Violating this precondition yields undefined behavior\&. \fBThis precondition is enforced with a static assertion\&.\fP
.RE
.PP
\fBWarning:\fP
.RS 4
There is no way to enforce all preconditions at compile-time\&. If the function is called with noncompliant iterators and with assertions switched off, the behavior is undefined and will most likely yield segmentation violation\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIIteratorType\fP iterator of container with contiguous storage 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP begin of the range to parse (included) 
.br
\fIlast\fP end of the range to parse (excluded) 
.br
\fIcb\fP a parser callback function of type \fBparser_callback_t\fP which is used to control the deserialization by filtering unwanted values (optional)
.RE
.PP
\fBReturns:\fP
.RS 4
result of the deserialization
.RE
.PP
Linear in the length of the input\&. The parser is a predictive LL(1) parser\&. The complexity can be higher if the parser callback function \fIcb\fP has a super-linear complexity\&.
.PP
\fBNote:\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&.
.RE
.PP
{The example below demonstrates the \fC\fBparse()\fP\fP function reading from an iterator range\&.,parse__iteratortype__parser_callback_t}
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.3 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<class ContiguousContainer , typename std::enable_if< not std::is_pointer< ContiguousContainer >::value and std::is_base_of< std::random_access_iterator_tag, typename std::iterator_traits< decltype(std::begin(std::declval< ContiguousContainer const >()))>::iterator_category >::value, int >::type  = 0> static \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::parse (const ContiguousContainer & c, const \fBparser_callback_t\fP cb = \fCnullptr\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
deserialize from a container with contiguous storage This function reads from a container with contiguous storage of 1-byte values\&. Compatible container types include \fCstd::vector\fP, \fCstd::string\fP, \fCstd::array\fP, and \fCstd::initializer_list\fP\&. User-defined containers can be used as long as they implement random-access iterators and a contiguous storage\&.
.PP
\fBPrecondition:\fP
.RS 4
The container storage is contiguous\&. Violating this precondition yields undefined behavior\&. \fBThis precondition is enforced with an assertion\&.\fP 
.PP
Each element of the container has a size of 1 byte\&. Violating this precondition yields undefined behavior\&. \fBThis precondition is enforced with a static assertion\&.\fP
.RE
.PP
\fBWarning:\fP
.RS 4
There is no way to enforce all preconditions at compile-time\&. If the function is called with a noncompliant container and with assertions switched off, the behavior is undefined and will most likely yield segmentation violation\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIContiguousContainer\fP container type with contiguous storage 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIc\fP container to read from 
.br
\fIcb\fP a parser callback function of type \fBparser_callback_t\fP which is used to control the deserialization by filtering unwanted values (optional)
.RE
.PP
\fBReturns:\fP
.RS 4
result of the deserialization
.RE
.PP
Linear in the length of the input\&. The parser is a predictive LL(1) parser\&. The complexity can be higher if the parser callback function \fIcb\fP has a super-linear complexity\&.
.PP
\fBNote:\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&.
.RE
.PP
{The example below demonstrates the \fC\fBparse()\fP\fP function reading from a contiguous container\&.,parse__contiguouscontainer__parser_callback_t}
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.3 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::patch (const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & json_patch) const\fC [inline]\fP"

.PP
applies a JSON patch \fCJSON Patch\fP defines a JSON document structure for expressing a sequence of operations to apply to a JSON) document\&. With this function, a JSON Patch is applied to the current JSON value by executing all operations from the patch\&.
.PP
\fBParameters:\fP
.RS 4
\fIjson_patch\fP JSON patch document 
.RE
.PP
\fBReturns:\fP
.RS 4
patched document
.RE
.PP
\fBNote:\fP
.RS 4
The application of a patch is atomic: Either all operations succeed and the patched document is returned or an exception is thrown\&. In any case, the original value is not changed: the patch is applied to a copy of the value\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP if a JSON pointer inside the patch could not be resolved successfully in the current JSON value; example: \fC'key baz
not found'\fP 
.br
\fIinvalid_argument\fP if the JSON patch is malformed (e\&.g\&., mandatory attributes are missing); example: \fC'operation add must have member path'\fP
.RE
.PP
Linear in the size of the JSON value and the length of the JSON patch\&. As usually only a fraction of the JSON value is affected by the patch, the complexity can usually be neglected\&.
.PP
{The following code shows how a JSON patch is applied to a value\&.,patch}
.PP
\fBSee also:\fP
.RS 4
\fBdiff\fP -- \fBcreate\fP a JSON \fBpatch\fP by comparing two JSON values
.PP
\fCRFC 6902 (JSON Patch)\fP 
.PP
\fCRFC 6901 (JSON Pointer)\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::push_back (\fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > && val)\fC [inline]\fP"

.PP
add an object to an array Appends the given element \fIval\fP to the end of the JSON value\&. If the function is called on a JSON null value, an empty array is created before appending \fIval\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIval\fP the value to add to the JSON array
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when called on a type other than JSON array or null; example: \fC'cannot use push_back() with number'\fP
.RE
.PP
Amortized constant\&.
.PP
{The example shows how \fC\fBpush_back()\fP\fP and \fC+=\fP can be used to add elements to a JSON array\&. Note how the \fCnull\fP value was silently converted to a JSON array\&.,push_back}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::push_back (const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & val)\fC [inline]\fP"

.PP
add an object to an array add an object to an array Appends the given element \fIval\fP to the end of the JSON value\&. If the function is called on a JSON null value, an empty array is created before appending \fIval\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIval\fP the value to add to the JSON array
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when called on a type other than JSON array or null; example: \fC'cannot use push_back() with number'\fP
.RE
.PP
Amortized constant\&.
.PP
{The example shows how \fC\fBpush_back()\fP\fP and \fC+=\fP can be used to add elements to a JSON array\&. Note how the \fCnull\fP value was silently converted to a JSON array\&.,push_back}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::push_back (const typename object_t::value_type & val)\fC [inline]\fP"

.PP
add an object to an object Inserts the given element \fIval\fP to the JSON object\&. If the function is called on a JSON null value, an empty object is created before inserting \fIval\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIval\fP the value to add to the JSON object
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when called on a type other than JSON object or null; example: \fC'cannot use push_back() with number'\fP
.RE
.PP
Logarithmic in the size of the container, O(log(\fC\fBsize()\fP\fP))\&.
.PP
{The example shows how \fC\fBpush_back()\fP\fP and \fC+=\fP can be used to add elements to a JSON object\&. Note how the \fCnull\fP value was silently converted to a JSON object\&.,push_back__object_t__value}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::push_back (std::initializer_list< \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > > init)\fC [inline]\fP"

.PP
add an object to an object This function allows to use \fCpush_back\fP with an initializer list\&. In case
.PP
.IP "1." 4
the current value is an object,
.IP "2." 4
the initializer list \fIinit\fP contains only two elements, and
.IP "3." 4
the first element of \fIinit\fP is a string,
.PP
.PP
\fIinit\fP is converted into an object element and added using \fBpush_back(const typename object_t::value_type&)\fP\&. Otherwise, \fIinit\fP is converted to a JSON value and added using \fBpush_back(basic_json&&)\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIinit\fP an initializer list
.RE
.PP
Linear in the size of the initializer list \fIinit\fP\&.
.PP
\fBNote:\fP
.RS 4
This function is required to resolve an ambiguous overload error, because pairs like \fC{'key', 'value'}\fP can be both interpreted as \fCobject_t::value_type\fP or \fCstd::initializer_list<\fBbasic_json\fP>\fP, see https://github.com/nlohmann/json/issues/235 for more information\&.
.RE
.PP
{The example shows how initializer lists are treated as objects when possible\&.,push_back__initializer_list} 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreverse_iterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::rbegin ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns an iterator to the reverse-beginning Returns an iterator to the reverse-beginning; that is, the last element\&.
.PP
Illustration from cppreference\&.com  Constant\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCReversibleContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCreverse_iterator(end())\fP\&.
.PP
.PP
{The following code shows an example for \fC\fBrbegin()\fP\fP\&.,rbegin}
.PP
\fBSee also:\fP
.RS 4
\fBcrbegin()\fP -- returns a const reverse \fBiterator\fP to the beginning 
.PP
\fBrend()\fP -- returns a reverse \fBiterator\fP to the \fBend\fP 
.PP
\fBcrend()\fP -- returns a const reverse \fBiterator\fP to the \fBend\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_reverse_iterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::rbegin () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const reverse iterator to the last element Returns a const iterator to the reverse-beginning; that is, the last element\&.
.PP
Illustration from cppreference\&.com  Constant\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCReversibleContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBrbegin()\fP\fP\&.
.PP
.PP
{The following code shows an example for \fC\fBcrbegin()\fP\fP\&.,crbegin}
.PP
\fBSee also:\fP
.RS 4
\fBrbegin()\fP -- returns a reverse \fBiterator\fP to the beginning 
.PP
\fBrend()\fP -- returns a reverse \fBiterator\fP to the \fBend\fP 
.PP
\fBcrend()\fP -- returns a const reverse \fBiterator\fP to the \fBend\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBreverse_iterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::rend ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns an iterator to the reverse-end Returns an iterator to the reverse-end; that is, one before the first element\&.
.PP
Illustration from cppreference\&.com  Constant\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCReversibleContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCreverse_iterator(begin())\fP\&.
.PP
.PP
{The following code shows an example for \fC\fBrend()\fP\fP\&.,rend}
.PP
\fBSee also:\fP
.RS 4
\fBcrend()\fP -- returns a const reverse \fBiterator\fP to the \fBend\fP 
.PP
\fBrbegin()\fP -- returns a reverse \fBiterator\fP to the beginning 
.PP
\fBcrbegin()\fP -- returns a const reverse \fBiterator\fP to the beginning
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBconst_reverse_iterator\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::rend () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const reverse iterator to one before the first Returns a const reverse iterator to the reverse-end; that is, one before the first element\&.
.PP
Illustration from cppreference\&.com  Constant\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCReversibleContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBrend()\fP\fP\&.
.PP
.PP
{The following code shows an example for \fC\fBcrend()\fP\fP\&.,crend}
.PP
\fBSee also:\fP
.RS 4
\fBrend()\fP -- returns a reverse \fBiterator\fP to the \fBend\fP 
.PP
\fBrbegin()\fP -- returns a reverse \fBiterator\fP to the beginning 
.PP
\fBcrbegin()\fP -- returns a const reverse \fBiterator\fP to the beginning
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBsize_type\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns the number of elements Returns the number of elements in a JSON value\&.
.PP
\fBReturns:\fP
.RS 4
The return value depends on the different types and is defined as follows: Value type return value  null \fC0\fP boolean \fC1\fP string \fC1\fP number \fC1\fP object result of function object_t::size() array result of function array_t::size() 
.RE
.PP
\fBNote:\fP
.RS 4
This function does not return the length of a string stored as JSON value - it returns the number of elements in the JSON value which is 1 in the case of a string\&.
.RE
.PP
Constant, as long as \fBarray_t\fP and \fBobject_t\fP satisfy the Container concept; that is, their \fBsize()\fP functions have constant complexity\&.
.PP
This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCstd::distance(\fBbegin()\fP, \fBend()\fP)\fP\&.
.PP
.PP
{The following code calls \fC\fBsize()\fP\fP on the different value types\&.,size}
.PP
\fBSee also:\fP
.RS 4
\fBempty()\fP -- checks whether the container is \fBempty\fP 
.PP
\fBmax_size()\fP -- returns the maximal number of elements
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::swap (\fBreference\fP other)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
exchanges the values Exchanges the contents of the JSON value with those of \fIother\fP\&. Does not invoke any move, copy, or swap operations on individual elements\&. All iterators and references remain valid\&. The past-the-end iterator is invalidated\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP JSON value to exchange the contents with
.RE
.PP
Constant\&.
.PP
{The example below shows how JSON values can be swapped with \fC\fBswap()\fP\fP\&.,swap__reference}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::swap (\fBarray_t\fP & other)\fC [inline]\fP"

.PP
exchanges the values Exchanges the contents of a JSON array with those of \fIother\fP\&. Does not invoke any move, copy, or swap operations on individual elements\&. All iterators and references remain valid\&. The past-the-end iterator is invalidated\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP array to exchange the contents with
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when JSON value is not an array; example: \fC'cannot use swap() with string'\fP
.RE
.PP
Constant\&.
.PP
{The example below shows how arrays can be swapped with \fC\fBswap()\fP\fP\&.,swap__array_t}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::swap (\fBobject_t\fP & other)\fC [inline]\fP"

.PP
exchanges the values Exchanges the contents of a JSON object with those of \fIother\fP\&. Does not invoke any move, copy, or swap operations on individual elements\&. All iterators and references remain valid\&. The past-the-end iterator is invalidated\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP object to exchange the contents with
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when JSON value is not an object; example: \fC'cannot use swap() with string'\fP
.RE
.PP
Constant\&.
.PP
{The example below shows how objects can be swapped with \fC\fBswap()\fP\fP\&.,swap__object_t}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::swap (\fBstring_t\fP & other)\fC [inline]\fP"

.PP
exchanges the values Exchanges the contents of a JSON string with those of \fIother\fP\&. Does not invoke any move, copy, or swap operations on individual elements\&. All iterators and references remain valid\&. The past-the-end iterator is invalidated\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP string to exchange the contents with
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP when JSON value is not a string; example: \fC'cannot
use swap() with boolean'\fP
.RE
.PP
Constant\&.
.PP
{The example below shows how strings can be swapped with \fC\fBswap()\fP\fP\&.,swap__string_t}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static std::vector<uint8_t> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::to_cbor (const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & j)\fC [inline]\fP, \fC [static]\fP"

.PP
create a MessagePack serialization of a given JSON value Serializes a given JSON value \fIj\fP to a byte vector using the CBOR (Concise Binary Object Representation) serialization format\&. CBOR is a binary serialization format which aims to be more compact than JSON itself, yet more efficient to parse\&.
.PP
\fBParameters:\fP
.RS 4
\fIj\fP JSON value to serialize 
.RE
.PP
\fBReturns:\fP
.RS 4
MessagePack serialization as byte vector
.RE
.PP
Linear in the size of the JSON value \fIj\fP\&.
.PP
{The example shows the serialization of a JSON value to a byte vector in CBOR format\&.,to_cbor}
.PP
\fBSee also:\fP
.RS 4
http://cbor.io 
.PP
\fBfrom_cbor(const std::vector<uint8_t>&, const size_t)\fP for the analogous deserialization 
.PP
\fBto_msgpack\fP(const \fBbasic_json\fP& for the related MessagePack format
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.9 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::to_cbor_internal (const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & j, std::vector< uint8_t > & v)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.PP
create a CBOR serialization of a given JSON value This is a straightforward implementation of the CBOR specification\&.
.PP
\fBParameters:\fP
.RS 4
\fIj\fP JSON value to serialize 
.br
\fIv\fP byte vector to write the serialization to
.RE
.PP
\fBSee also:\fP
.RS 4
https://tools.ietf.org/html/rfc7049 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static std::vector<uint8_t> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::to_msgpack (const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & j)\fC [inline]\fP, \fC [static]\fP"

.PP
create a MessagePack serialization of a given JSON value Serializes a given JSON value \fIj\fP to a byte vector using the MessagePack serialization format\&. MessagePack is a binary serialization format which aims to be more compact than JSON itself, yet more efficient to parse\&.
.PP
\fBParameters:\fP
.RS 4
\fIj\fP JSON value to serialize 
.RE
.PP
\fBReturns:\fP
.RS 4
MessagePack serialization as byte vector
.RE
.PP
Linear in the size of the JSON value \fIj\fP\&.
.PP
{The example shows the serialization of a JSON value to a byte vector in MessagePack format\&.,to_msgpack}
.PP
\fBSee also:\fP
.RS 4
http://msgpack.org 
.PP
\fBfrom_msgpack(const std::vector<uint8_t>&, const size_t)\fP for the analogous deserialization 
.PP
\fBto_cbor\fP(const \fBbasic_json\fP& for the related CBOR format
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.9 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::to_msgpack_internal (const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & j, std::vector< uint8_t > & v)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.PP
create a MessagePack serialization of a given JSON value This is a straightforward implementation of the MessagePack specification\&.
.PP
\fBParameters:\fP
.RS 4
\fIj\fP JSON value to serialize 
.br
\fIv\fP byte vector to write the serialization to
.RE
.PP
\fBSee also:\fP
.RS 4
https://github.com/msgpack/msgpack/blob/master/spec.md 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> constexpr \fBvalue_t\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::type () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return the type of the JSON value (explicit) Return the type of the JSON value as a value from the \fBvalue_t\fP enumeration\&.
.PP
\fBReturns:\fP
.RS 4
the type of the JSON value
.RE
.PP
Constant\&.
.PP
No-throw guarantee: this member function never throws exceptions\&.
.PP
{The following code exemplifies \fC\fBtype()\fP\fP for all JSON types\&.,type}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> std::string \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::type_name () const\fC [inline]\fP"

.PP
return the type as string Returns the type name as string to be used in error messages - usually to indicate that a function was called on a wrong JSON type\&.
.PP
\fBReturns:\fP
.RS 4
basically a string representation of a the \fIm_type\fP member
.RE
.PP
Constant\&.
.PP
{The following code exemplifies \fC\fBtype_name()\fP\fP for all JSON types\&.,type_name}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0, public since 2\&.1\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBbasic_json\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::unflatten () const\fC [inline]\fP"

.PP
unflatten a previously flattened JSON value The function restores the arbitrary nesting of a JSON value that has been flattened before using the \fBflatten()\fP function\&. The JSON value must meet certain constraints:
.IP "1." 4
The value must be an object\&.
.IP "2." 4
The keys must be JSON pointers (see \fCRFC 6901\fP)
.IP "3." 4
The mapped values must be primitive JSON types\&.
.PP
.PP
\fBReturns:\fP
.RS 4
the original JSON from a flattened version
.RE
.PP
\fBNote:\fP
.RS 4
Empty objects and arrays are flattened by \fBflatten()\fP to \fCnull\fP values and can not unflattened to their original type\&. Apart from this example, for a JSON value \fCj\fP, the following is always true: \fCj == j\&.flatten()\&.\fBunflatten()\fP\fP\&.
.RE
.PP
Linear in the size the JSON value\&.
.PP
{The following code shows how a flattened JSON object is unflattened into the original nested JSON object\&.,unflatten}
.PP
\fBSee also:\fP
.RS 4
\fBflatten()\fP for the reverse function
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<class ValueType , typename std::enable_if< std::is_convertible< basic_json_t, ValueType >::value, int >::type  = 0> ValueType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::value (const typename object_t::key_type & key, ValueType default_value) const\fC [inline]\fP"

.PP
access specified object element with default value Returns either a copy of an object's element at the specified key \fIkey\fP or a given default value if no element with key \fIkey\fP exists\&.
.PP
The function is basically equivalent to executing 
.PP
.nf
try {
    return at(key);
} catch(std::out_of_range) {
    return default_value;
}

.fi
.PP
.PP
\fBNote:\fP
.RS 4
Unlike \fBat(const typename object_t::key_type&)\fP, this function does not throw if the given key \fIkey\fP was not found\&.
.PP
Unlike \fBoperator[](const typename object_t::key_type& key)\fP, this function does not implicitly add an element to the position defined by \fIkey\fP\&. This function is furthermore also applicable to const objects\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key of the element to access 
.br
\fIdefault_value\fP the value to return if \fIkey\fP is not found
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIValueType\fP type compatible to JSON values, for instance \fCint\fP for JSON integer numbers, \fCbool\fP for JSON booleans, or \fCstd::vector\fP types for JSON arrays\&. Note the type of the expected value at \fIkey\fP and the default value \fIdefault_value\fP must be compatible\&.
.RE
.PP
\fBReturns:\fP
.RS 4
copy of the element at key \fIkey\fP or \fIdefault_value\fP if \fIkey\fP is not found
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if JSON is not an object; example: \fC'cannot use
value() with null'\fP
.RE
.PP
Logarithmic in the size of the container\&.
.PP
{The example below shows how object elements can be queried with a default value\&.,basic_json__value}
.PP
\fBSee also:\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBoperator[](const typename object_t::key_type&)\fP for unchecked access by \fBreference\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBstring_t\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::value (const typename object_t::key_type & key, const char * default_value) const\fC [inline]\fP"

.PP
overload for a default value of type const char* access specified object element with default value Returns either a copy of an object's element at the specified key \fIkey\fP or a given default value if no element with key \fIkey\fP exists\&.
.PP
The function is basically equivalent to executing 
.PP
.nf
try {
    return at(key);
} catch(std::out_of_range) {
    return default_value;
}

.fi
.PP
.PP
\fBNote:\fP
.RS 4
Unlike \fBat(const typename object_t::key_type&)\fP, this function does not throw if the given key \fIkey\fP was not found\&.
.PP
Unlike \fBoperator[](const typename object_t::key_type& key)\fP, this function does not implicitly add an element to the position defined by \fIkey\fP\&. This function is furthermore also applicable to const objects\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key of the element to access 
.br
\fIdefault_value\fP the value to return if \fIkey\fP is not found
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIValueType\fP type compatible to JSON values, for instance \fCint\fP for JSON integer numbers, \fCbool\fP for JSON booleans, or \fCstd::vector\fP types for JSON arrays\&. Note the type of the expected value at \fIkey\fP and the default value \fIdefault_value\fP must be compatible\&.
.RE
.PP
\fBReturns:\fP
.RS 4
copy of the element at key \fIkey\fP or \fIdefault_value\fP if \fIkey\fP is not found
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if JSON is not an object; example: \fC'cannot use
value() with null'\fP
.RE
.PP
Logarithmic in the size of the container\&.
.PP
{The example below shows how object elements can be queried with a default value\&.,basic_json__value}
.PP
\fBSee also:\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBoperator[](const typename object_t::key_type&)\fP for unchecked access by \fBreference\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<class ValueType , typename std::enable_if< std::is_convertible< basic_json_t, ValueType >::value, int >::type  = 0> ValueType \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::value (const \fBjson_pointer\fP & ptr, ValueType default_value) const\fC [inline]\fP"

.PP
access specified object element via JSON Pointer with default value Returns either a copy of an object's element at the specified key \fIkey\fP or a given default value if no element with key \fIkey\fP exists\&.
.PP
The function is basically equivalent to executing 
.PP
.nf
try {
    return at(ptr);
} catch(std::out_of_range) {
    return default_value;
}

.fi
.PP
.PP
\fBNote:\fP
.RS 4
Unlike \fBat(const json_pointer&)\fP, this function does not throw if the given key \fIkey\fP was not found\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP a JSON pointer to the element to access 
.br
\fIdefault_value\fP the value to return if \fIptr\fP found no value
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIValueType\fP type compatible to JSON values, for instance \fCint\fP for JSON integer numbers, \fCbool\fP for JSON booleans, or \fCstd::vector\fP types for JSON arrays\&. Note the type of the expected value at \fIkey\fP and the default value \fIdefault_value\fP must be compatible\&.
.RE
.PP
\fBReturns:\fP
.RS 4
copy of the element at key \fIkey\fP or \fIdefault_value\fP if \fIkey\fP is not found
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if JSON is not an object; example: \fC'cannot use
value() with null'\fP
.RE
.PP
Logarithmic in the size of the container\&.
.PP
{The example below shows how object elements can be queried with a default value\&.,basic_json__value_ptr}
.PP
\fBSee also:\fP
.RS 4
\fBoperator[](const json_pointer&)\fP for unchecked access by \fBreference\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.2 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBstring_t\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::value (const \fBjson_pointer\fP & ptr, const char * default_value) const\fC [inline]\fP"

.PP
overload for a default value of type const char* access specified object element via JSON Pointer with default value Returns either a copy of an object's element at the specified key \fIkey\fP or a given default value if no element with key \fIkey\fP exists\&.
.PP
The function is basically equivalent to executing 
.PP
.nf
try {
    return at(ptr);
} catch(std::out_of_range) {
    return default_value;
}

.fi
.PP
.PP
\fBNote:\fP
.RS 4
Unlike \fBat(const json_pointer&)\fP, this function does not throw if the given key \fIkey\fP was not found\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP a JSON pointer to the element to access 
.br
\fIdefault_value\fP the value to return if \fIptr\fP found no value
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIValueType\fP type compatible to JSON values, for instance \fCint\fP for JSON integer numbers, \fCbool\fP for JSON booleans, or \fCstd::vector\fP types for JSON arrays\&. Note the type of the expected value at \fIkey\fP and the default value \fIdefault_value\fP must be compatible\&.
.RE
.PP
\fBReturns:\fP
.RS 4
copy of the element at key \fIkey\fP or \fIdefault_value\fP if \fIkey\fP is not found
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::domain_error\fP if JSON is not an object; example: \fC'cannot use
value() with null'\fP
.RE
.PP
Logarithmic in the size of the container\&.
.PP
{The example below shows how object elements can be queried with a default value\&.,basic_json__value_ptr}
.PP
\fBSee also:\fP
.RS 4
\fBoperator[](const json_pointer&)\fP for unchecked access by \fBreference\fP
.RE
.PP
\fBSince:\fP
.RS 4
version 2\&.0\&.2 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<detail::value_t > friend struct \fBdetail::external_constructor\fP\fC [friend]\fP"

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> bool operator!= (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: not equal Compares two JSON values for inequality by calculating \fCnot (lhs == rhs)\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns:\fP
.RS 4
whether the values \fIlhs\fP and \fIrhs\fP are not equal
.RE
.PP
Linear\&.
.PP
{The example demonstrates comparing several JSON types\&.,operator__notequal}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator!= (\fBconst_reference\fP lhs, const ScalarType rhs)\fC [friend]\fP"

.PP
comparison: not equal comparison: not equal Compares two JSON values for inequality by calculating \fCnot (lhs == rhs)\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns:\fP
.RS 4
whether the values \fIlhs\fP and \fIrhs\fP are not equal
.RE
.PP
Linear\&.
.PP
{The example demonstrates comparing several JSON types\&.,operator__notequal}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator!= (const ScalarType lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: not equal comparison: not equal Compares two JSON values for inequality by calculating \fCnot (lhs == rhs)\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns:\fP
.RS 4
whether the values \fIlhs\fP and \fIrhs\fP are not equal
.RE
.PP
Linear\&.
.PP
{The example demonstrates comparing several JSON types\&.,operator__notequal}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> bool operator< (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: less than Compares whether one JSON value \fIlhs\fP is less than another JSON value \fIrhs\fP according to the following rules:
.IP "\(bu" 2
If \fIlhs\fP and \fIrhs\fP have the same type, the values are compared using the default \fC<\fP operator\&.
.IP "\(bu" 2
Integer and floating-point numbers are automatically converted before comparison
.IP "\(bu" 2
In case \fIlhs\fP and \fIrhs\fP have different types, the values are ignored and the order of the types is considered, see \fBoperator<(const value_t, const value_t)\fP\&.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns:\fP
.RS 4
whether \fIlhs\fP is less than \fIrhs\fP 
.RE
.PP
Linear\&.
.PP
{The example demonstrates comparing several JSON types\&.,operator__less}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> std::ostream& operator<< (std::ostream & o, const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & j)\fC [friend]\fP"

.PP
serialize to stream Serialize the given JSON value \fIj\fP to the output stream \fIo\fP\&. The JSON value will be serialized using the \fBdump\fP member function\&. The indentation of the output can be controlled with the member variable \fCwidth\fP of the output stream \fIo\fP\&. For instance, using the manipulator \fCstd::setw(4)\fP on \fIo\fP sets the indentation level to \fC4\fP and the serialization result is the same as calling \fCdump(4)\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIo\fP stream to serialize to 
.br
\fIj\fP JSON value to serialize
.RE
.PP
\fBReturns:\fP
.RS 4
the stream \fIo\fP 
.RE
.PP
Linear\&.
.PP
{The example below shows the serialization with different parameters to \fCwidth\fP to adjust the indentation level\&.,operator_serialize}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> std::istream& operator<< (\fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & j, std::istream & i)\fC [friend]\fP"

.PP
deserialize from stream Deserializes an input stream to a JSON value\&.
.PP
\fBParameters:\fP
.RS 4
\fIi\fP input stream to read a serialized JSON value from 
.br
\fIj\fP JSON value to write the deserialized input to
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::invalid_argument\fP in case of parse errors
.RE
.PP
Linear in the length of the input\&. The parser is a predictive LL(1) parser\&.
.PP
\fBNote:\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&.
.RE
.PP
{The example below shows how a JSON value is constructed by reading a serialization from a stream\&.,operator_deserialize}
.PP
\fBSee also:\fP
.RS 4
\fBparse(std::istream&, const parser_callback_t)\fP for a variant with a \fBparser\fP callback function to filter values while parsing
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> bool operator<= (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: less than or equal Compares whether one JSON value \fIlhs\fP is less than or equal to another JSON value by calculating \fCnot (rhs < lhs)\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns:\fP
.RS 4
whether \fIlhs\fP is less than or equal to \fIrhs\fP 
.RE
.PP
Linear\&.
.PP
{The example demonstrates comparing several JSON types\&.,operator__greater}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> bool operator== (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: equal Compares two JSON values for equality according to the following rules:
.IP "\(bu" 2
Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same\&.
.IP "\(bu" 2
Integer and floating-point numbers are automatically converted before comparison\&. Floating-point numbers are compared indirectly: two floating-point numbers \fCf1\fP and \fCf2\fP are considered equal if neither \fCf1 > f2\fP nor \fCf2 > f1\fP holds\&.
.IP "\(bu" 2
Two JSON null values are equal\&.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns:\fP
.RS 4
whether the values \fIlhs\fP and \fIrhs\fP are equal
.RE
.PP
Linear\&.
.PP
{The example demonstrates comparing several JSON types\&.,operator__equal}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator== (\fBconst_reference\fP lhs, const ScalarType rhs)\fC [friend]\fP"

.PP
comparison: equal comparison: equal Compares two JSON values for equality according to the following rules:
.IP "\(bu" 2
Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same\&.
.IP "\(bu" 2
Integer and floating-point numbers are automatically converted before comparison\&. Floating-point numbers are compared indirectly: two floating-point numbers \fCf1\fP and \fCf2\fP are considered equal if neither \fCf1 > f2\fP nor \fCf2 > f1\fP holds\&.
.IP "\(bu" 2
Two JSON null values are equal\&.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns:\fP
.RS 4
whether the values \fIlhs\fP and \fIrhs\fP are equal
.RE
.PP
Linear\&.
.PP
{The example demonstrates comparing several JSON types\&.,operator__equal}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator== (const ScalarType lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: equal comparison: equal Compares two JSON values for equality according to the following rules:
.IP "\(bu" 2
Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same\&.
.IP "\(bu" 2
Integer and floating-point numbers are automatically converted before comparison\&. Floating-point numbers are compared indirectly: two floating-point numbers \fCf1\fP and \fCf2\fP are considered equal if neither \fCf1 > f2\fP nor \fCf2 > f1\fP holds\&.
.IP "\(bu" 2
Two JSON null values are equal\&.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns:\fP
.RS 4
whether the values \fIlhs\fP and \fIrhs\fP are equal
.RE
.PP
Linear\&.
.PP
{The example demonstrates comparing several JSON types\&.,operator__equal}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> bool operator> (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: greater than Compares whether one JSON value \fIlhs\fP is greater than another JSON value by calculating \fCnot (lhs <= rhs)\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns:\fP
.RS 4
whether \fIlhs\fP is greater than to \fIrhs\fP 
.RE
.PP
Linear\&.
.PP
{The example demonstrates comparing several JSON types\&.,operator__lessequal}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> bool operator>= (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: greater than or equal Compares whether one JSON value \fIlhs\fP is greater than or equal to another JSON value by calculating \fCnot (lhs < rhs)\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns:\fP
.RS 4
whether \fIlhs\fP is greater than or equal to \fIrhs\fP 
.RE
.PP
Linear\&.
.PP
{The example demonstrates comparing several JSON types\&.,operator__greaterequal}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> std::ostream& operator>> (const \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & j, std::ostream & o)\fC [friend]\fP"

.PP
serialize to stream serialize to stream Serialize the given JSON value \fIj\fP to the output stream \fIo\fP\&. The JSON value will be serialized using the \fBdump\fP member function\&. The indentation of the output can be controlled with the member variable \fCwidth\fP of the output stream \fIo\fP\&. For instance, using the manipulator \fCstd::setw(4)\fP on \fIo\fP sets the indentation level to \fC4\fP and the serialization result is the same as calling \fCdump(4)\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIo\fP stream to serialize to 
.br
\fIj\fP JSON value to serialize
.RE
.PP
\fBReturns:\fP
.RS 4
the stream \fIo\fP 
.RE
.PP
Linear\&.
.PP
{The example below shows the serialization with different parameters to \fCwidth\fP to adjust the indentation level\&.,operator_serialize}
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> std::istream& operator>> (std::istream & i, \fBbasic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer > & j)\fC [friend]\fP"

.PP
deserialize from stream deserialize from stream Deserializes an input stream to a JSON value\&.
.PP
\fBParameters:\fP
.RS 4
\fIi\fP input stream to read a serialized JSON value from 
.br
\fIj\fP JSON value to write the deserialized input to
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::invalid_argument\fP in case of parse errors
.RE
.PP
Linear in the length of the input\&. The parser is a predictive LL(1) parser\&.
.PP
\fBNote:\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&.
.RE
.PP
{The example below shows how a JSON value is constructed by reading a serialization from a stream\&.,operator_deserialize}
.PP
\fBSee also:\fP
.RS 4
\fBparse(std::istream&, const parser_callback_t)\fP for a variant with a \fBparser\fP callback function to filter values while parsing
.RE
.PP
\fBSince:\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBvalue_t\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::m_type = value_t::null\fC [private]\fP"

.PP
the type of the current element 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBjson_value\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::m_value = {}\fC [private]\fP"

.PP
the value of the current element 

.SH "Author"
.PP 
Generated automatically by Doxygen for Sync from the source code\&.
