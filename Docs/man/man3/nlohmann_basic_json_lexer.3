.TH "nlohmann::basic_json< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer" 3 "Tue Jul 18 2017" "Version 1.0.0" "Sync" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nlohmann::basic_json< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer \- lexical analysis  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBstrtonum\fP"
.br
.RI "parse string into a built-in arithmetic type as if the current locale is POSIX\&. "
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBtoken_type\fP { \fBtoken_type::uninitialized\fP, \fBtoken_type::literal_true\fP, \fBtoken_type::literal_false\fP, \fBtoken_type::literal_null\fP, \fBtoken_type::value_string\fP, \fBtoken_type::value_unsigned\fP, \fBtoken_type::value_integer\fP, \fBtoken_type::value_float\fP, \fBtoken_type::begin_array\fP, \fBtoken_type::begin_object\fP, \fBtoken_type::end_array\fP, \fBtoken_type::end_object\fP, \fBtoken_type::name_separator\fP, \fBtoken_type::value_separator\fP, \fBtoken_type::parse_error\fP, \fBtoken_type::end_of_input\fP }
.RI "token types for the parser ""
.br
.ti -1c
.RI "using \fBlexer_char_t\fP = unsigned char"
.br
.RI "the char type to use in the lexer "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBlexer\fP (const \fBlexer_char_t\fP *buff, const size_t len) noexcept"
.br
.RI "a lexer from a buffer with given length "
.ti -1c
.RI "\fBlexer\fP (std::istream &s)"
.br
.RI "a lexer from an input stream "
.ti -1c
.RI "\fBlexer\fP ()=delete"
.br
.ti -1c
.RI "\fBlexer\fP (const \fBlexer\fP &)=delete"
.br
.ti -1c
.RI "\fBlexer\fP \fBoperator=\fP (const \fBlexer\fP &)=delete"
.br
.ti -1c
.RI "\fBtoken_type\fP \fBscan\fP ()"
.br
.ti -1c
.RI "void \fBfill_line_buffer\fP (size_t n=0)"
.br
.RI "append data from the stream to the line buffer "
.ti -1c
.RI "\fBstring_t\fP \fBget_token_string\fP () const"
.br
.RI "return string representation of last read token "
.ti -1c
.RI "\fBstring_t\fP \fBget_string\fP () const"
.br
.RI "return string value for string tokens "
.ti -1c
.RI "bool \fBget_number\fP (\fBbasic_json\fP &result, const \fBtoken_type\fP token) const"
.br
.RI "return number value for number tokens "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBstring_t\fP \fBto_unicode\fP (const std::size_t codepoint1, const std::size_t codepoint2=0)"
.br
.RI "create a string from one or two Unicode code points "
.ti -1c
.RI "static std::string \fBtoken_type_name\fP (const \fBtoken_type\fP t)"
.br
.RI "return name of values of type token_type (only used for errors) "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::istream * \fBm_stream\fP = nullptr"
.br
.RI "optional input stream "
.ti -1c
.RI "\fBstring_t\fP \fBm_line_buffer\fP {}"
.br
.RI "line buffer buffer for m_stream "
.ti -1c
.RI "\fBstring_t\fP \fBm_line_buffer_tmp\fP {}"
.br
.RI "used for filling m_line_buffer "
.ti -1c
.RI "const \fBlexer_char_t\fP * \fBm_content\fP = nullptr"
.br
.RI "the buffer pointer "
.ti -1c
.RI "const \fBlexer_char_t\fP * \fBm_start\fP = nullptr"
.br
.RI "pointer to the beginning of the current symbol "
.ti -1c
.RI "const \fBlexer_char_t\fP * \fBm_marker\fP = nullptr"
.br
.RI "pointer for backtracking information "
.ti -1c
.RI "const \fBlexer_char_t\fP * \fBm_cursor\fP = nullptr"
.br
.RI "pointer to the current symbol "
.ti -1c
.RI "const \fBlexer_char_t\fP * \fBm_limit\fP = nullptr"
.br
.RI "pointer to the end of the buffer "
.ti -1c
.RI "\fBtoken_type\fP \fBlast_token_type\fP = \fBtoken_type::end_of_input\fP"
.br
.RI "the last token type "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType = std::string, class BooleanType = bool, class NumberIntegerType = std::int64_t, class NumberUnsignedType = std::uint64_t, class NumberFloatType = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer>
.br
class nlohmann::basic_json< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer"
lexical analysis 

This class organizes the lexical analysis during JSON deserialization\&. The core of it is a scanner generated by \fCre2c\fP that processes a buffer and recognizes tokens according to RFC 7159\&. 
.SH "Member Typedef Documentation"
.PP 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> using \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::\fBlexer::lexer_char_t\fP =  unsigned char"

.PP
the char type to use in the lexer 
.SH "Member Enumeration Documentation"
.PP 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> enum \fBnlohmann::basic_json::lexer::token_type\fP\fC [strong]\fP"

.PP
token types for the parser 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIuninitialized \fP\fP
indicating the scanner is uninitialized 
.TP
\fB\fIliteral_true \fP\fP
the \fCtrue\fP literal 
.TP
\fB\fIliteral_false \fP\fP
the \fCfalse\fP literal 
.TP
\fB\fIliteral_null \fP\fP
the \fCnull\fP literal 
.TP
\fB\fIvalue_string \fP\fP
a string -- use \fBget_string()\fP for actual value 
.TP
\fB\fIvalue_unsigned \fP\fP
an unsigned integer -- use \fBget_number()\fP for actual value 
.TP
\fB\fIvalue_integer \fP\fP
a signed integer -- use \fBget_number()\fP for actual value 
.TP
\fB\fIvalue_float \fP\fP
an floating point number -- use \fBget_number()\fP for actual value 
.TP
\fB\fIbegin_array \fP\fP
the character for array begin \fC[\fP 
.TP
\fB\fIbegin_object \fP\fP
the character for object begin \fC{\fP 
.TP
\fB\fIend_array \fP\fP
the character for array end \fC]\fP 
.TP
\fB\fIend_object \fP\fP
the character for object end \fC}\fP 
.TP
\fB\fIname_separator \fP\fP
the name separator \fC:\fP 
.TP
\fB\fIvalue_separator \fP\fP
the value separator \fC,\fP 
.TP
\fB\fIparse_error \fP\fP
indicating a parse error 
.TP
\fB\fIend_of_input \fP\fP
indicating the end of the input buffer 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::lexer (const \fBlexer_char_t\fP * buff, const size_t len)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
a lexer from a buffer with given length 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::lexer (std::istream & s)\fC [inline]\fP, \fC [explicit]\fP"

.PP
a lexer from an input stream 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::lexer ()\fC [delete]\fP"

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::lexer (const \fBlexer\fP &)\fC [delete]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> void \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::fill_line_buffer (size_t n = \fC0\fP)\fC [inline]\fP"

.PP
append data from the stream to the line buffer This function is called by the \fBscan()\fP function when the end of the buffer (\fCm_limit\fP) is reached and the \fCm_cursor\fP pointer cannot be incremented without leaving the limits of the line buffer\&. Note re2c decides when to call this function\&.
.PP
If the lexer reads from contiguous storage, there is no trailing null byte\&. Therefore, this function must make sure to add these padding null bytes\&.
.PP
If the lexer reads from an input stream, this function reads the next line of the input\&.
.PP
\fBPrecondition:\fP
.RS 4
p p p p p p u u u u u x \&. \&. \&. \&. \&. \&. ^ ^ ^ ^ m_content m_start | m_limit m_cursor
.RE
.PP
\fBPostcondition:\fP
.RS 4
u u u u u x x x x x x x \&. \&. \&. \&. \&. \&. ^ ^ ^ | m_cursor m_limit m_start m_content 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> bool \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::get_number (\fBbasic_json\fP & result, const \fBtoken_type\fP token) const\fC [inline]\fP"

.PP
return number value for number tokens This function translates the last token into the most appropriate number type (either integer, unsigned integer or floating point), which is passed back to the caller via the result parameter\&.
.PP
integral numbers that don't fit into the the range of the respective type are parsed as number_float_t
.PP
floating-point values do not satisfy std::isfinite predicate are converted to value_t::null
.PP
throws if the entire string [m_start \&.\&. m_cursor) cannot be interpreted as a number
.PP
\fBParameters:\fP
.RS 4
\fIresult\fP \fBbasic_json\fP object to receive the number\&. 
.br
\fItoken\fP the type of the number token 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBstring_t\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::get_string () const\fC [inline]\fP"

.PP
return string value for string tokens The function iterates the characters between the opening and closing quotes of the string value\&. The complete string is the range [m_start,m_cursor)\&. Consequently, we iterate from m_start+1 to m_cursor-1\&.
.PP
We differentiate two cases:
.PP
.IP "1." 4
Escaped characters\&. In this case, a new character is constructed according to the nature of the escape\&. Some escapes create new characters (e\&.g\&., \fC'\\\\n'\fP is replaced by \fC'\\n'\fP), some are copied as is (e\&.g\&., \fC'\\\\\\\\'\fP)\&. Furthermore, Unicode escapes of the shape \fC'\\\\uxxxx'\fP need special care\&. In this case, to_unicode takes care of the construction of the values\&.
.IP "2." 4
Unescaped characters are copied as is\&.
.PP
.PP
\fBPrecondition:\fP
.RS 4
\fCm_cursor - m_start >= 2\fP, meaning the length of the last token is at least 2 bytes which is trivially true for any string (which consists of at least two quotes)\&. 
.PP
.nf
" c1 c2 c3 ... "
^                ^
m_start          m_cursor

.fi
.PP
.RE
.PP
Linear in the length of the string\&.
.br
 Lemma: The loop body will always terminate\&.
.br
 Proof (by contradiction): Assume the loop body does not terminate\&. As the loop body does not contain another loop, one of the called functions must never return\&. The called functions are \fCstd::strtoul\fP and to_unicode\&. Neither function can loop forever, so the loop body will never loop forever which contradicts the assumption that the loop body does not terminate, q\&.e\&.d\&.
.br
 Lemma: The loop condition for the for loop is eventually false\&.
.br
 Proof (by contradiction): Assume the loop does not terminate\&. Due to the above lemma, this can only be due to a tautological loop condition; that is, the loop condition i < m_cursor - 1 must always be true\&. Let x be the change of i for any loop iteration\&. Then m_start + 1 + x < m_cursor - 1 must hold to loop indefinitely\&. This can be rephrased to m_cursor - m_start - 2 > x\&. With the precondition, we x <= 0, meaning that the loop condition holds indefinitely if i is always decreased\&. However, observe that the value of i is strictly increasing with each iteration, as it is incremented by 1 in the iteration expression and never decremented inside the loop body\&. Hence, the loop condition will eventually be false which contradicts the assumption that the loop condition is a tautology, q\&.e\&.d\&.
.PP
\fBReturns:\fP
.RS 4
string value of current token without opening and closing quotes 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP if to_unicode fails 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBstring_t\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::get_token_string () const\fC [inline]\fP"

.PP
return string representation of last read token 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBlexer\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::operator= (const \fBlexer\fP &)\fC [delete]\fP"

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBtoken_type\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::scan ()\fC [inline]\fP"
This function implements a scanner for JSON\&. It is specified using regular expressions that try to follow RFC 7159 as close as possible\&. These regular expressions are then translated into a minimized deterministic finite automaton (DFA) by the tool \fCre2c\fP\&. As a result, the translated code for this function consists of a large block of code with \fCgoto\fP jumps\&.
.PP
\fBReturns:\fP
.RS 4
the class of the next token read from the buffer
.RE
.PP
Linear in the length of the input\&.
.br
 Proposition: The loop below will always terminate for finite input\&.
.br
 Proof (by contradiction): Assume a finite input\&. To loop forever, the loop must never hit code with a \fCbreak\fP statement\&. The only code snippets without a \fCbreak\fP statement are the continue statements for whitespace and byte-order-marks\&. To loop forever, the input must be an infinite sequence of whitespace or byte-order-marks\&. This contradicts the assumption of finite input, q\&.e\&.d\&. 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static \fBstring_t\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::to_unicode (const std::size_t codepoint1, const std::size_t codepoint2 = \fC0\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
create a string from one or two Unicode code points There are two cases: (1) \fIcodepoint1\fP is in the Basic Multilingual Plane (U+0000 through U+FFFF) and \fIcodepoint2\fP is 0, or (2) \fIcodepoint1\fP and \fIcodepoint2\fP are a UTF-16 surrogate pair to represent a code point above U+FFFF\&.
.PP
\fBParameters:\fP
.RS 4
\fIcodepoint1\fP the code point (can be high surrogate) 
.br
\fIcodepoint2\fP the code point (can be low surrogate or 0)
.RE
.PP
\fBReturns:\fP
.RS 4
string representation of the code point; the length of the result string is between 1 and 4 characters\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP if code point is > 0x10ffff; example: \fC'code
points above 0x10FFFF are invalid'\fP 
.br
\fIstd::invalid_argument\fP if the low surrogate is invalid; example: \fC''missing or wrong low surrogate''\fP
.RE
.PP
Constant\&.
.PP
\fBSee also:\fP
.RS 4
http://en.wikipedia.org/wiki/UTF-8#Sample_code 
.RE
.PP

.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> static std::string \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::token_type_name (const \fBtoken_type\fP t)\fC [inline]\fP, \fC [static]\fP"

.PP
return name of values of type token_type (only used for errors) 
.SH "Member Data Documentation"
.PP 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBtoken_type\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::last_token_type = \fBtoken_type::end_of_input\fP\fC [private]\fP"

.PP
the last token type 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> const \fBlexer_char_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::m_content = nullptr\fC [private]\fP"

.PP
the buffer pointer 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> const \fBlexer_char_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::m_cursor = nullptr\fC [private]\fP"

.PP
pointer to the current symbol 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> const \fBlexer_char_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::m_limit = nullptr\fC [private]\fP"

.PP
pointer to the end of the buffer 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBstring_t\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::m_line_buffer {}\fC [private]\fP"

.PP
line buffer buffer for m_stream 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> \fBstring_t\fP \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::m_line_buffer_tmp {}\fC [private]\fP"

.PP
used for filling m_line_buffer 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> const \fBlexer_char_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::m_marker = nullptr\fC [private]\fP"

.PP
pointer for backtracking information 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> const \fBlexer_char_t\fP* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::m_start = nullptr\fC [private]\fP"

.PP
pointer to the beginning of the current symbol 
.SS "template<template< typename U, typename V, typename\&.\&.\&. Args > class ObjectType = std::map, template< typename U, typename\&.\&.\&. Args > class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template< typename U > class AllocatorType = std::allocator, template< typename T, typename SFINAE=void > class JSONSerializer = adl_serializer> std::istream* \fBnlohmann::basic_json\fP< ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer >::lexer::m_stream = nullptr\fC [private]\fP"

.PP
optional input stream 

.SH "Author"
.PP 
Generated automatically by Doxygen for Sync from the source code\&.
