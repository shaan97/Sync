.TH "nlohmann::detail::has_non_default_from_json< BasicJsonType, T >" 3 "Tue Jul 18 2017" "Version 1.0.0" "Sync" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nlohmann::detail::has_non_default_from_json< BasicJsonType, T >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <json\&.hpp>\fP
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr bool \fBvalue\fP"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "template<typename U , typename  = enable_if_t<std::is_same<                                   T, decltype(uncvref_t<U>::from_json(std::declval<BasicJsonType>()))>::value >> static int \fBdetect\fP (U &&)"
.br
.ti -1c
.RI "static void \fBdetect\fP (\&.\&.\&.)"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "template<typename BasicJsonType , typename T > template<typename U , typename  = enable_if_t<std::is_same<                                   T, decltype(uncvref_t<U>::from_json(std::declval<BasicJsonType>()))>::value >> static int \fBnlohmann::detail::has_non_default_from_json\fP< BasicJsonType, T >::detect (U &&)\fC [static]\fP, \fC [private]\fP"

.SS "template<typename BasicJsonType , typename T > static void \fBnlohmann::detail::has_non_default_from_json\fP< BasicJsonType, T >::detect ( \&.\&.\&.)\fC [static]\fP, \fC [private]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<typename BasicJsonType , typename T > constexpr bool \fBnlohmann::detail::has_non_default_from_json\fP< BasicJsonType, T >::value\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= std::is_integral<decltype(detect(
                                      std::declval<typename BasicJsonType::template json_serializer<T, void>>()))>::value
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Sync from the source code\&.
