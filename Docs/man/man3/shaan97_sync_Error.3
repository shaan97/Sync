.TH "shaan97::sync::Error" 3 "Tue Jul 18 2017" "Version 1.0.0" "Sync" \" -*- nroff -*-
.ad l
.nh
.SH NAME
shaan97::sync::Error
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Error\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBError\fP (const \fBERROR_TYPE\fP &e=\fBNONE\fP)"
.br
.ti -1c
.RI "\fBError\fP (const boost::system::error_code &e)"
.br
.RI "Constructor initializing via \fCboost::system::error_code\fP "
.ti -1c
.RI "\fBError\fP (const \fBERROR_TYPE\fP &e, const std::string &\fBdetails\fP)"
.br
.ti -1c
.RI "\fBError\fP (const boost::system::error_code &e, const std::string \fBdetails\fP)"
.br
.ti -1c
.RI "\fBError\fP (const \fBError\fP &\fBerror\fP)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBError\fP (\fBError\fP &&\fBerror\fP)"
.br
.RI "Implement move semantics\&. "
.ti -1c
.RI "void \fBsetError\fP (const \fBERROR_TYPE\fP &e, const std::string &\fBdetails\fP='')"
.br
.ti -1c
.RI "void \fBsetError\fP (const boost::system::error_code &e, const std::string &\fBdetails\fP='')"
.br
.ti -1c
.RI "std::string \fBgetDetails\fP () const"
.br
.ti -1c
.RI "virtual \fBError\fP & \fBoperator=\fP (\fBError\fP &&\fBerror\fP)"
.br
.RI "Operator= Move Semantics\&. "
.ti -1c
.RI "void \fBswap\fP (\fBError\fP &\fBerror\fP)"
.br
.ti -1c
.RI "virtual \fBError\fP & \fBoperator=\fP (const \fBError\fP &\fBerror\fP)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBError\fP &e)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBERROR_TYPE\fP &e)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const boost::system::error_code &e)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBError\fP &e)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBERROR_TYPE\fP &e)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const boost::system::error_code &e)"
.br
.ti -1c
.RI "\fBoperator bool\fP () const"
.br
.RI "True if there was an error\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBERROR_TYPE\fP \fBerror\fP"
.br
.RI "Type of error\&. "
.ti -1c
.RI "std::string \fBdetails\fP"
.br
.RI "Details of the error (may be empty) "
.ti -1c
.RI "boost::system::error_code \fBboost_error\fP"
.br
.ti -1c
.RI "bool \fBisBoostError\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &out, const \fBError\fP &e)"
.br
.RI "Can be used to send formatted string to ostream\&. "
.ti -1c
.RI "void \fBto_json\fP (\fBnlohmann::json\fP &j, const \fBError\fP &e)"
.br
.ti -1c
.RI "void \fBfrom_json\fP (\fBnlohmann::json\fP &j, \fBError\fP &e)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Error::Error (const \fBERROR_TYPE\fP & e = \fC\fBNONE\fP\fP)"
Constructor initializing via \fCERROR_TYPE\fP 
.PP
\fBNote:\fP
.RS 4
There is convenience with implicit type casting for ERROR_TYPE 
.RE
.PP

.SS "Error::Error (const boost::system::error_code & e)"

.PP
Constructor initializing via \fCboost::system::error_code\fP 
.SS "Error::Error (const \fBERROR_TYPE\fP & e, const std::string & details)"
Constructors with the additional option of adding details about the error 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The type of error 
.br
\fIdetails\fP Case specific info on the error 
.RE
.PP

.SS "Error::Error (const boost::system::error_code & e, const std::string details)"

.SS "Error::Error (const \fBError\fP & error)"

.PP
Copy constructor\&. 
.SS "Error::Error (\fBError\fP && error)"

.PP
Implement move semantics\&. 
.SH "Member Function Documentation"
.PP 
.SS "std::string Error::getDetails () const"

.PP
\fBReturns:\fP
.RS 4
Produces formatted string detailing the type of error and potentially a message 
.RE
.PP

.SS "\fBError\fP & Error::operator= (\fBError\fP && error)\fC [virtual]\fP"

.PP
Operator= Move Semantics\&. 
.SS "\fBError\fP & Error::operator= (const \fBError\fP & error)\fC [virtual]\fP"

.SS "void Error::setError (const \fBERROR_TYPE\fP & e, const std::string & details = \fC''\fP)"
Mutator for \fCERROR_TYPE\fP 
.PP
\fBNote:\fP
.RS 4
If switching between ERROR_TYPE and boost::system::error_code then the old value is invalidated\&. 
.RE
.PP

.SS "void Error::setError (const boost::system::error_code & e, const std::string & details = \fC''\fP)"
Mutator for \fCboost::system::error_code\fP 
.PP
\fBNote:\fP
.RS 4
If switching between ERROR_TYPE and boost::system::error_code then the old value is invalidated\&. 
.RE
.PP

.SS "void Error::swap (\fBError\fP & error)"

.SH "Member Data Documentation"
.PP 
.SS "boost::system::error_code shaan97::sync::Error::boost_error\fC [private]\fP"

.SS "std::string shaan97::sync::Error::details\fC [private]\fP"

.PP
Details of the error (may be empty) 
.SS "\fBERROR_TYPE\fP shaan97::sync::Error::error\fC [private]\fP"

.PP
Type of error\&. 
.SS "bool shaan97::sync::Error::isBoostError\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Sync from the source code\&.
