.TH "shaan97::sync::Member" 3 "Tue Jul 18 2017" "Version 1.0.0" "Sync" \" -*- nroff -*-
.ad l
.nh
.SH NAME
shaan97::sync::Member \- \fC\fBMember\fP\fPs are always members of a \fC\fBshaan97::sync::Group\fP\fP\&. They are the means of sending and receiving data from clients\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Member\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMember\fP (const \fBMemberName\fP &\fBname\fP, const std::shared_ptr< boost::asio::ip::tcp::socket > &socket)"
.br
.RI "Constructor requiring the \fBMember\fP's name and a socket over which to communicate\&. "
.ti -1c
.RI "\fBMember\fP (const \fBMember\fP &m)=delete"
.br
.RI "No copy constructor : we don't want two references to the same socket\&. "
.ti -1c
.RI "\fBMember\fP (\fBMember\fP &&m)"
.br
.RI "Move constructor so that we can at least move resources across functions\&. "
.ti -1c
.RI "virtual \fB~Member\fP ()"
.br
.RI "Put just in case future releases include inheritance (e\&.g\&. different types of \fC\fBMember\fP\fPs) "
.ti -1c
.RI "\fBMemberName\fP \fBgetName\fP () const"
.br
.ti -1c
.RI "bool \fBsetName\fP (const \fBMemberName\fP &\fBname\fP)"
.br
.ti -1c
.RI "void \fBsetName\fP (const \fBMemberName\fP &\fBname\fP, \fBError\fP &e)"
.br
.ti -1c
.RI "bool \fBchangeSocket\fP (const std::shared_ptr< boost::asio::ip::tcp::socket > &socket)"
.br
.ti -1c
.RI "void \fBchangeSocket\fP (const std::shared_ptr< boost::asio::ip::tcp::socket > &socket, \fBError\fP &e)"
.br
.ti -1c
.RI "template<class Buffer > std::size_t \fBwrite\fP (Buffer b, std::size_t len, \fBError\fP &e)"
.br
.ti -1c
.RI "template<class Buffer > std::size_t \fBread\fP (Buffer b, std::size_t len, \fBError\fP &e) const"
.br
.ti -1c
.RI "template<class Buffer > std::size_t \fBread\fP (Buffer b, \fBError\fP &e) const"
.br
.ti -1c
.RI "\fBMember\fP & \fBoperator=\fP (const \fBMember\fP &m)=delete"
.br
.RI "No assignment operator\&. We don't want two references to the same socket\&. "
.ti -1c
.RI "\fBMember\fP & \fBoperator=\fP (\fBMember\fP &&m)"
.br
.RI "No move assignment operator\&. We don't want two references to the same socket\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBMember\fP &m) const"
.br
.RI "Tests to see if two Members are the same\&. "
.ti -1c
.RI "template<class Buffer > std::size_t \fBread\fP (Buffer b, size_t len, \fBError\fP &e) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBMemberName\fP \fBname\fP"
.br
.ti -1c
.RI "std::shared_ptr< boost::asio::ip::tcp::socket > \fBclient_socket\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fC\fBMember\fP\fPs are always members of a \fC\fBshaan97::sync::Group\fP\fP\&. They are the means of sending and receiving data from clients\&. 

Server-side representation of a client\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Member::Member (const \fBMemberName\fP & name, const std::shared_ptr< boost::asio::ip::tcp::socket > & socket)"

.PP
Constructor requiring the \fBMember\fP's name and a socket over which to communicate\&. 
.SS "shaan97::sync::Member::Member (const \fBMember\fP & m)\fC [delete]\fP"

.PP
No copy constructor : we don't want two references to the same socket\&. 
.SS "Member::Member (\fBMember\fP && m)"

.PP
Move constructor so that we can at least move resources across functions\&. 
.SS "Member::~Member ()\fC [virtual]\fP"

.PP
Put just in case future releases include inheritance (e\&.g\&. different types of \fC\fBMember\fP\fPs) 
.SH "Member Function Documentation"
.PP 
.SS "bool Member::changeSocket (const std::shared_ptr< boost::asio::ip::tcp::socket > & socket)"

.SS "void Member::changeSocket (const std::shared_ptr< boost::asio::ip::tcp::socket > & socket, \fBError\fP & e)"

.SS "\fBMemberName\fP Member::getName () const"

.PP
\fBReturns:\fP
.RS 4
Returns the name of the \fC\fBMember\fP\fP 
.RE
.PP

.SS "\fBMember\fP& shaan97::sync::Member::operator= (const \fBMember\fP & m)\fC [delete]\fP"

.PP
No assignment operator\&. We don't want two references to the same socket\&. 
.SS "\fBMember\fP& shaan97::sync::Member::operator= (\fBMember\fP && m)"

.PP
No move assignment operator\&. We don't want two references to the same socket\&. 
.SS "bool Member::operator== (const \fBMember\fP & m) const"

.PP
Tests to see if two Members are the same\&. 
.SS "template<class Buffer > std::size_t shaan97::sync::Member::read (Buffer b, size_t len, \fBError\fP & e) const"

.SS "template<class Buffer > std::size_t shaan97::sync::Member::read (Buffer b, std::size_t len, \fBError\fP & e) const"
Read the contents of the socket into the Buffer 
.PP
\fBParameters:\fP
.RS 4
\fIBuffer\fP Reference to the first space in the buffer 
.br
\fIlen\fP Size of the buffer 
.br
\fIe\fP Set to an boost::system::error_code value in case it occurs 
.RE
.PP
\fBReturns:\fP
.RS 4
std::size_t Number of elements in buffer after reading the socket 
.RE
.PP

.SS "template<class Buffer > std::size_t Member::read (Buffer b, \fBError\fP & e) const"
Read the contents of the socket into the Buffer 
.PP
\fBParameters:\fP
.RS 4
\fIBuffer\fP Reference to the first space in the buffer 
.br
\fIe\fP Set to an boost::system::error_code value in case it occurs 
.RE
.PP
\fBReturns:\fP
.RS 4
std::size_t Number of elements in buffer after reading the socket 
.RE
.PP
\fBNote:\fP
.RS 4
In this overload, the Buffer must behave like a boost::asio::buffer 
.RE
.PP

.SS "bool Member::setName (const \fBMemberName\fP & name)"

.PP
\fBParameters:\fP
.RS 4
\fIname\fP The proposed new name for the \fC\fBMember\fP\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns true if successful change 
.RE
.PP

.SS "void Member::setName (const \fBMemberName\fP & name, \fBError\fP & e)"

.PP
\fBParameters:\fP
.RS 4
\fIname\fP The proposed new name for the \fC\fBMember\fP\fP 
.br
\fIe\fP Indication of error, if it occurs 
.RE
.PP

.SS "template<class Buffer > std::size_t Member::write (Buffer b, std::size_t len, \fBError\fP & e)"
Write the contents of the Buffer into the socket 
.PP
\fBParameters:\fP
.RS 4
\fIBuffer\fP Reference to the first element in the buffer 
.br
\fIlen\fP Size of the buffer 
.br
\fIe\fP Set to an boost::system::error_code value in case it occurs 
.RE
.PP
\fBReturns:\fP
.RS 4
std::size_t Number of elements in buffer written over the socket 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "std::shared_ptr<boost::asio::ip::tcp::socket> shaan97::sync::Member::client_socket\fC [protected]\fP"

.SS "\fBMemberName\fP shaan97::sync::Member::name\fC [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Sync from the source code\&.
