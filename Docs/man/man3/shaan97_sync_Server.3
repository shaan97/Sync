.TH "shaan97::sync::Server" 3 "Tue Jul 18 2017" "Version 1.0.0" "Sync" \" -*- nroff -*-
.ad l
.nh
.SH NAME
shaan97::sync::Server
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Server\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBServer\fP (boost::asio::io_service &io_service)"
.br
.ti -1c
.RI "virtual \fB~Server\fP ()"
.br
.RI "A virtual destructor, declared only in case the future releases feature inheritance\&. "
.ti -1c
.RI "\fBServer\fP (const \fBServer\fP &s)=delete"
.br
.ti -1c
.RI "\fBServer\fP & \fBoperator=\fP (const \fBServer\fP &s)=delete"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBstart_accept\fP ()"
.br
.ti -1c
.RI "void \fBhandle_accept\fP (std::shared_ptr< boost::asio::ip::tcp::socket > &socket, const boost::system::error_code &error)"
.br
.ti -1c
.RI "void \fBcreateGroup\fP (std::shared_ptr< boost::asio::ip::tcp::socket > &socket, \fBMessage\fP &message)"
.br
.ti -1c
.RI "void \fBaddToGroup\fP (std::shared_ptr< boost::asio::ip::tcp::socket > &socket, \fBMessage\fP &message)"
.br
.ti -1c
.RI "void \fBdeleteGroup\fP (std::shared_ptr< boost::asio::ip::tcp::socket > &socket, \fBMessage\fP &message)"
.br
.ti -1c
.RI "void \fBhandle_heartbeat\fP (\fBMessage\fP &heartbeat)"
.br
.ti -1c
.RI "void \fBpromoteMember\fP (std::shared_ptr< boost::asio::ip::tcp::socket > &socket, \fBMessage\fP &message)"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static void \fBsendFailure\fP (std::shared_ptr< boost::asio::ip::tcp::socket > &socket, const \fBError\fP &error)"
.br
.ti -1c
.RI "static void \fBsendSuccess\fP (std::shared_ptr< boost::asio::ip::tcp::socket > &socket)"
.br
.ti -1c
.RI "static void \fBsendSuccess\fP (std::shared_ptr< boost::asio::ip::tcp::socket > &socket, const \fBError\fP &error)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::unordered_map< \fBGROUP_ID\fP, \fBGroup\fP > \fBgroups\fP"
.br
.ti -1c
.RI "std::unordered_map< \fBGROUP_ID\fP, std::pair< std::time_t, std::mutex > > \fBheartbeats\fP"
.br
.ti -1c
.RI "std::mutex \fBgroupSizeLock\fP"
.br
.ti -1c
.RI "boost::asio::ip::tcp::acceptor \fBacceptor\fP"
.br
.RI "Used to accept incoming connections (asynchronously) "
.in -1c
.SH "Detailed Description"
.PP 
This is one of the most important components as it represents the \fBServer\fP In particular, this \fBServer\fP manages the various Groups, and takes incoming connections and forwards them to the appropriate \fBGroup\fP\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Server::Server (boost::asio::io_service & io_service)"
The main constructor for the \fBServer\fP, which sets up the network capabilities using a \fCboost::asio::io_service\fP object\&.
.PP
\fBParameters:\fP
.RS 4
\fIio_service\fP This parameter is necessary for conducting all boost::asio services\&. 
.RE
.PP

.SS "Server::~Server ()\fC [virtual]\fP"

.PP
A virtual destructor, declared only in case the future releases feature inheritance\&. 
.SS "shaan97::sync::Server::Server (const \fBServer\fP & s)\fC [delete]\fP"
There should be no reason to copy a server exactly, since we wouldn't want two servers trying to conduct the exact same I/O service\&. Thus we explicitly delete this capability\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBServer\fP& shaan97::sync::Server::operator= (const \fBServer\fP & s)\fC [delete]\fP"

.PP
There should be no reason to copy a server exactly, since we wouldn't want two servers trying to conduct the exact same I/O service\&. Thus we explicitly delete this capability\&. 
.SH "Member Data Documentation"
.PP 
.SS "boost::asio::ip::tcp::acceptor shaan97::sync::Server::acceptor\fC [private]\fP"

.PP
Used to accept incoming connections (asynchronously) 
.SS "std::unordered_map<\fBGROUP_ID\fP, \fBGroup\fP> shaan97::sync::Server::groups\fC [private]\fP"
Map keeping track of the various Groups based on their ID's\&. Can be used to help forward clients to the appropriate group since queries involve GID 
.SS "std::mutex shaan97::sync::Server::groupSizeLock\fC [private]\fP"
Grab this lock whenever
.IP "1." 4
You are using an iterator for the groups (they only stay valid so long as the size is the same)\&.
.IP "2." 4
You are inserting/deleting/replacing a \fBGroup\fP 
.PP

.SS "std::unordered_map<\fBGROUP_ID\fP, std::pair<std::time_t, std::mutex> > shaan97::sync::Server::heartbeats\fC [private]\fP"
We map gid to a time_t and it's respective mutex (finer grained concurrency, and prevents heartbeat overload attacks)\&.
.PP
\fBNote:\fP
.RS 4
Make sure to follow the ordering specified for lock acquisition to prevent deadlocks 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Sync from the source code\&.
